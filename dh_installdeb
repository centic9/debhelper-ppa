#!/usr/bin/perl

=head1 NAME

dh_installdeb - install files into the DEBIAN directory

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installdeb> [S<I<debhelper options>>]

=head1 DESCRIPTION

B<dh_installdeb> is a debhelper program that is responsible for installing
files into the F<DEBIAN> directories in package build directories with the
correct permissions.

=head1 FILES

=over 4

=item I<package>.postinst

=item I<package>.preinst

=item I<package>.postrm

=item I<package>.prerm

These maintainer scripts are installed into the F<DEBIAN> directory.

Inside the scripts, the token B<#DEBHELPER#> is replaced with
shell script snippets generated by other debhelper commands.

=item I<package>.triggers

=item I<package>.shlibs

These control files are installed into the F<DEBIAN> directory.

Note that I<package>.shlibs is only installed in compat level 9 and
earlier.  In compat 10, please use L<dh_makeshlibs(1)>.

=item I<package>.conffiles

Historically, this file was needed to manually mark files files as
conffiles.  However, it has become de facto obsolete since debhelper
automatically computed which files should be marked as conffiles.

In compatibility level up and including 11, this control file will be
installed into the F<DEBIAN> directory.  In compatibility level 12 and
later, the file is silently ignored.

=item I<package>.maintscript

Lines in this file correspond to L<dpkg-maintscript-helper(1)>
commands and parameters.  However, the "maint-script-parameters"
should I<not> be included as debhelper will add those automatically.

Example:

    # Correct
    rm_conffile /etc/obsolete.conf 0.2~ foo
    # INCORRECT
    rm_conffile /etc/obsolete.conf 0.2~ foo -- "$@"

In compat 10 or later, any shell metacharacters will be escaped, so
arbitrary shell code cannot be inserted here.  For example, a line
such as C<mv_conffile /etc/oldconffile /etc/newconffile> will insert
maintainer script snippets into all maintainer scripts sufficient to
move that conffile.

It was also the intention to escape shell metacharacters in previous
compat levels.  However, it did not work properly and as such it was
possible to embed arbitrary shell code in earlier compat levels.

The B<dh_installdeb> tool will do some basic validation of some of
the commands listed in this file to catch common mistakes.  The
validation is enabled as a warning since compat 10 and as a hard
error in compat 12.

=back

=cut

init();

# dpkg-maintscript-helper commands with their associated dpkg pre-dependency
# versions.
my %maintscript_predeps = (
	"rm_conffile" => "",
	"mv_conffile" => "",
	"symlink_to_dir" => "",
	"dir_to_symlink" => "",
);
my %maintscript_validator = (
	"rm_conffile" => \&_validate_conffile_args,
	"mv_conffile" => \&_validate_conffile_args,
);

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	install_dir("$tmp/DEBIAN");

	if (is_udeb($package)) {
		# For udebs, only do the postinst, and no #DEBHELPER#.
		# Udebs also support menutest and isinstallable scripts.
		foreach my $script (qw{postinst menutest isinstallable}) {
			my $f=pkgfile($package,$script);
			if ($f) {
				install_prog($f, "$tmp/DEBIAN/$script");
			}
		}

		# stop here for udebs
		next;
	}
	
	my $maintscriptfile=pkgfile($package, "maintscript");
	if ($maintscriptfile) {
		if (compat(9)) {
			foreach my $line (filedoublearray($maintscriptfile)) {
				my $cmd=$line->[0];
				error("unknown dpkg-maintscript-helper command: $cmd")
					unless exists $maintscript_predeps{$cmd};
				addsubstvar($package, "misc:Pre-Depends", "dpkg",
					">= $maintscript_predeps{$cmd}")
					if length $maintscript_predeps{$cmd};
				my $params=escape_shell(@$line);
				foreach my $script (qw{postinst preinst prerm postrm}) {
					autoscript($package, $script, "maintscript-helper",
							   "s!#PARAMS#!$params!g");
				}
			}
		} else {
			my @maintscripts = filedoublearray($maintscriptfile);
			my @params;
			foreach my $line (@maintscripts) {
				my $cmd=$line->[0];
				error("unknown dpkg-maintscript-helper command: $cmd")
					unless exists $maintscript_predeps{$cmd};
				addsubstvar($package, "misc:Pre-Depends", "dpkg",
					">= $maintscript_predeps{$cmd}")
					if length $maintscript_predeps{$cmd};
				if (my $validator = $maintscript_validator{$cmd}) {
					$validator->($package, @{$line});
				}
				push(@params, escape_shell(@{$line}) );
			}
			foreach my $script (qw{postinst preinst prerm postrm}) {
				my $subst = sub {
					my @res;
					chomp;
					for my $param (@params) {
						my $line = $_;
						$line =~ s{#PARAMS#}{$param}g;
						push(@res, $line);
					}
					$_ = join("\n", @res) . "\n";
				};
				autoscript($package, $script, "maintscript-helper", $subst);
			}
		}
	}

	# Install debian scripts.
	foreach my $script (qw{postinst preinst prerm postrm}) {
		debhelper_script_subst($package, $script);
	}

	# Install non-executable files
	my @non_exec_files;
	# Removed in compat 12.
	push(@non_exec_files, 'conffiles') if compat(11);
	# In compat 10, we let dh_makeshlibs handle "shlibs".
	push(@non_exec_files, 'shlibs') if compat(9);
	foreach my $file (@non_exec_files) {
		my $f=pkgfile($package,$file);
		if ($f) {
			install_file($f, "$tmp/DEBIAN/$file");
		}
	}

	install_triggers($package, $tmp);

	# Automatic conffiles registration: If it is in /etc, it is a
	# conffile.
	if ( -d "$tmp/etc") {
		complex_doit("find $tmp/etc -type f -printf '/etc/%P\n' | LC_ALL=C sort >> $tmp/DEBIAN/conffiles");
		# Anything found?
		if (-z "$tmp/DEBIAN/conffiles") {
			rm_files("$tmp/DEBIAN/conffiles");
		}
		else {
			reset_perm_and_owner(0644, "$tmp/DEBIAN/conffiles");
		}
	}
}

sub install_triggers {
	my ($package, $tmp) = @_;
	my $generated = generated_file($package, 'triggers', 0);
	my @sources = grep { -f $_ } (
		pkgfile($package, 'triggers'),
		$generated,
	);
	my $target = "$tmp/DEBIAN/triggers";
	return if not @sources;
	if (@sources > 1) {
		my $merged = "${generated}.merged";
		open(my $ofd, '>', $merged)
			or error("open ${target} failed: $!");
		for my $src (@sources) {
			open(my $ifd, '<', $src)
				or error("open ${src} failed: $!");
			print {$ofd} $_ while <$ifd>;
			close($ifd);
		}
		close($ofd)	or error("close ${merged} failed: $!");
		@sources = ($merged);
	}
	install_file($sources[0], $target);
}

sub _validate_conffile_args {
	my ($package, $cmd, @args) = @_;
	my ($current_conffile, $new_conffile, $prior_version, $owning_package, $other);
	for my $arg (@args) {
		if ($arg eq '--') {
			_maybe_error("The maintscripts file for $package includes a \"--\" for one of the ${cmd} commands, but it should not");
		}
	}
	if ($cmd eq 'rm_conffile') {
		($current_conffile, $prior_version, $owning_package, $other) = @args;
	} else {
		($current_conffile, $new_conffile, $prior_version, $owning_package, $other) = @args;
	}
	$current_conffile //= '';
	_maybe_error("The current conffile path for ${cmd} must be present and absolute, got ${current_conffile}")
		if not $current_conffile or substr($current_conffile, 0, 1) ne '/';
	_maybe_error("The new conffile path for ${cmd} must be present and absolute, got ${new_conffile}")
		if $cmd eq 'mv_conffile' and (not $new_conffile or substr($new_conffile, 0, 1) ne '/');

	_maybe_error("The version for ${cmd} ${current_conffile} is not valid, got ${prior_version}")
		if $prior_version and $prior_version !~ m{^${Debian::Debhelper::Dh_Lib::PKGVERSION_REGEX}$}o;
	_maybe_error("The owning package for ${cmd} ${current_conffile} is not valid, got ${owning_package}")
		if $owning_package and $owning_package !~ m{^${Debian::Debhelper::Dh_Lib::PKGNAME_REGEX}$}o;
	if (defined($other)) {
		warning("Too many arguments for ${cmd} ${current_conffile}");
	}
}

sub _maybe_error {
	my ($msg) = @_;
	if (compat(11)) {
		warning($msg);
	} else {
		error($msg);
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
