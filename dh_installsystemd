#!/usr/bin/perl -w

=head1 NAME

dh_installsystemd - install systemd unit files

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;
use File::Find;
use Cwd qw(getcwd abs_path);

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installsystemd> [S<I<debhelper options>>] [B<--restart-after-upgrade>] [B<--no-stop-on-upgrade>] [B<--no-enable>] [B<--name=>I<name>] [S<I<unit file> ...>]

=head1 DESCRIPTION

B<dh_installsystemd> is a debhelper program that is responsible for enabling,
disabling, starting, stopping and restarting systemd unit files.

In the simple case, it finds all unit files installed by a package (e.g.
bacula-fd.service) and enables them. It is not necessary that the machine
actually runs systemd during package installation time, enabling happens on all
machines in order to be able to switch from sysvinit to systemd and back.

For only generating blocks for specific service files, you need to pass them as
arguments, e.g. B<dh_installsystemd quota.service> and B<dh_installsystemd
--name=quotarpc quotarpc.service>.

=head1 FILES

=over 4

=item debian/I<package>.service, debian/I<package>@.service

If this exists, it is installed into lib/systemd/system/I<package>.service (or
lib/systemd/system/I<package>@.service) in the package build directory.

=item debian/I<package>.tmpfile

If this exists, it is installed into usr/lib/tmpfiles.d/I<package>.conf in the
package build directory. (The tmpfiles.d mechanism is currently only used
by systemd.)

=item debian/I<package>.target, debian/I<package>@.target

If this exists, it is installed into lib/systemd/system/I<package>.target (or
lib/systemd/system/I<package>@.target) in the package build directory.

=item debian/I<package>.socket, debian/I<package>@.socket

If this exists, it is installed into lib/systemd/system/I<package>.socket (or
lib/systemd/system/I<package>@.socket) in the package build directory.

=item debian/I<package>.mount

If this exists, it is installed into lib/systemd/system/I<package>.mount
in the package build directory.

=item debian/I<package>.path, debian/I<package>@.path

If this exists, it is installed into lib/systemd/system/I<package>.path (or
lib/systemd/system/I<package>@.path) in the package build directory.

=item debian/I<package>.timer, debian/I<package>@.timer

If this exists, it is installed into lib/systemd/system/I<package>.timer (or
lib/systemd/system/I<package>@.timer) in the package build directory.

=back

=head1 OPTIONS

=over 4

=item B<--no-enable>

Disable the service(s) on purge, but do not enable them on install.

B<Note> that this option does not affect whether the services are
started.  Please remember to also use B<--no-start> if the service
should not be started.

=item B<--name=>I<name>

Install the service file as I<name.service> instead of the default filename,
which is the I<package.service>. When this parameter is used,
B<dh_installsystemd> looks for and installs files named
F<debian/package.name.service> instead of the usual F<debian/package.service>.
Moreover, maintainer scripts are only generated for units that match the given
I<name>.

=item B<--restart-after-upgrade>

Do not stop the unit file until after the package upgrade has been completed.
This is the default behaviour in compat 10.

In earlier compat levels the default was to stop the unit file in the
F<prerm>, and start it again in the F<postinst>.

This can be useful for daemons that should not have a possibly long
downtime during upgrade. But you should make sure that the daemon will not
get confused by the package being upgraded while it's running before using
this option.

=item B<--no-restart-after-upgrade>

Undo a previous B<--restart-after-upgrade> (or the default of compat
10).  If no other options are given, this will cause the service to be
stopped in the F<prerm> script and started again in the F<postinst>
script.

=item B<-r>, B<--no-stop-on-upgrade>, B<--no-restart-on-upgrade>

Do not stop service on upgrade.

=item B<--no-start>

Do not start the unit file after upgrades and after initial installation (the
latter is only relevant for services without a corresponding init script).

B<Note> that this option does not affect whether the services are
enabled.  Please remember to also use B<--no-enable> if the services
should not be enabled.

=back

=head1 NOTES

Note that this command is not idempotent. L<dh_prep(1)> should be called
between invocations of this command (with the same arguments). Otherwise, it
may cause multiple instances of the same text to be added to maintainer
scripts.

=cut

$dh{RESTART_AFTER_UPGRADE} = 1;

init(options => {
	"no-enable" => \$dh{NO_ENABLE},
	"r" => \$dh{R_FLAG},
	'no-stop-on-upgrade' => \$dh{R_FLAG},
	"no-restart-on-upgrade" => \$dh{R_FLAG},
	"no-start" => \$dh{NO_START},
	"R|restart-after-upgrade!" => \$dh{RESTART_AFTER_UPGRADE},
	"no-also" => \$dh{NO_ALSO},
});

sub contains_install_section {
	my ($unit_path) = @_;

	open(my $fh, '<', $unit_path) or error("Cannot open($unit_path) to check for [Install]: $!");

	while (my $line = <$fh>) {
		chomp($line);
		return 1 if $line =~ /^\s*\[Install\]$/i;
	}
	close($fh);
	return 0;
}

sub install_unit {
	my ($package, $script, $pkgsuffix, $path, $installsuffix) = @_;
	$installsuffix = $installsuffix || $pkgsuffix;
	my $unit = pkgfile($package, $pkgsuffix);
	return if $unit eq '';
	install_dir($path);
	install_file($unit, "${path}/${script}.${installsuffix}");
}

# Extracts the Also= or Alias= line(s) from a unit file.
# In case this produces horribly wrong results, you can pass --no-also, but
# that should really not be necessary. Please report bugs to
# pkg-systemd-maintainers.
sub extract_key {
	my ($unit_path, $key) = @_;
	my @values;

	return @values if $dh{NO_ALSO};

	open(my $fh, '<', $unit_path) or error("Cannot open($unit_path) for extracting the Also= line(s): $!");

	while (my $line = <$fh>) {
		chomp($line);

		# The keys parsed from the unit file below can only have
		# unit names as values. Since unit names can't have
		# whitespace in systemd, simply use split and strip any
		# leading/trailing quotes. See systemd-escape(1) for
		# examples of valid unit names.
		if ($line =~ /^\s*$key=(.+)$/i) {
			for my $value (split(/\s+/, $1)) {
				$value =~ s/^(["'])(.*)\g1$/$2/;
				push @values, $value;
			}
		}
	}
	close($fh);
	return @values;
}


# PROMISE: DH NOOP WITHOUT tmp(lib/systemd/system) tmp(usr/lib/tmpfiles.d) tmp(etc/tmpfiles.d) mount path service socket target tmpfile timer

my %requested_files = map { basename($_) => 1 } @ARGV;
my %installed_files;

my %snippet_options = ('snippet-order' => 'service');

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmpdir = tmpdir($package);
	my (@installed_units, @start_units,  @enable_units, %aliases, @tmpfiles);

	# Figure out what filename to install it as.
	my $script;
	if (defined $dh{NAME}) {
		$script=$dh{NAME};
	}
	else {
		$script=$package;
	}

	for my $service_type (qw(service target socket path timer)) {
		install_unit($package, $script, $service_type, "$tmpdir/lib/systemd/system");
		install_unit("${package}@", "${script}@", $service_type, "$tmpdir/lib/systemd/system");
	}

	install_unit($package, $script, 'mount', "$tmpdir/lib/systemd/system");
	install_unit($package, $script, 'tmpfile', "$tmpdir/usr/lib/tmpfiles.d", 'conf');

	my $oldcwd = getcwd();
	find({
		wanted => sub {
			my $name = $File::Find::name;
			return unless -f $name;
			return unless $name =~ m,^\Q${tmpdir}\E/lib/systemd/system/[^/]+$,;
			if (-l) {
				my $target = abs_path(readlink());
				$target =~ s,^\Q${oldcwd}\E/,,g;
				$aliases{$target} = [ $_ ];
			} else {
				push @installed_units, $name;
			}
		},
		no_chdir => 1,
	}, "${tmpdir}/lib/systemd/system") if -d "${tmpdir}/lib/systemd/system";

	# Handle either only the unit files which were passed as arguments or
	# all unit files that are installed in this package.
	my @args;
	if (@ARGV > 0) {
	       @args = @ARGV;
	}
	elsif ($dh{NAME}) {
		# treat --name flag as if the corresponding units were passed in the command line
		@args = grep /(^|\/)$dh{NAME}\.(mount|path|service|socket|target|tmpfile)$/, @installed_units;
	}
	else {
		@args = @installed_units;
	}

	# support excluding units via -X
	foreach my $x (@{$dh{EXCLUDE}}) {
		@args = grep !/(^|\/)$x$/, @args;
	}

	# This hash prevents us from looping forever in the following while loop.
	# An actual real-world example of such a loop is systemdâ€™s
	# systemd-readahead-drop.service, which contains
	# Also=systemd-readahead-collect.service, and that file in turn
	# contains Also=systemd-readahead-drop.service, thus forming an endless
	# loop.
	my %seen;
	# We use while/shift because we push to the list in the body.
	while (@args) {
		my $name = shift @args;
		my $base = basename($name);

		# Try to make the path absolute, so that the user can call
		# dh_installsystemd bacula-fd.service
		if ($base eq $name) {
			# NB: This works because @installed_units contains
			# files from precisely one directory.
			my ($full) = grep { basename($_) eq $base } @installed_units;
			if (defined($full)) {
				$name = $full;
			} else {
				warning(qq|Could not find "$name" in the /lib/systemd/system directory of $package. | .
					qq|This could be a typo, or using Also= with a service file from another package. | .
					qq|Please check carefully that this message is harmless.|);
			}
		}

		$installed_files{$base} = 1 if exists($requested_files{$base});

		# Skip template service files like e.g. getty@.service.
		# Enabling, disabling, starting or stopping those services
		# without specifying the instance (e.g. getty@ttyS0.service) is
		# not useful.
		if ($name =~ /\@/) {
			next;
		}

		# Handle all unit files specified via Also= explicitly.
		# This is not necessary for enabling, but for disabling, as we
		# cannot read the unit file when disabling (it was already
		# deleted).
		my @also = grep { !exists($seen{$_}) } extract_key($name, 'Also');
		$seen{$_} = 1 for @also;
		@args = (@args, @also);

		push @{$aliases{$name}}, $_ for extract_key($name, 'Alias');
		my @sysv = grep {
				my $base = $_;
				$base =~ s/\.(?:mount|service|socket|target|path)$//g;
				-f "$tmpdir/etc/init.d/$base"
			} ($base, @{$aliases{$name}});
		if (@sysv == 0 && !grep { $_ eq $name } @start_units) {
			push @start_units, $name;
		}

		if (contains_install_section($name) && !grep { $_ eq $name } @enable_units) {
			push @enable_units, $name;
		}
	}

	# Include postinst-init-tmpfiles if the package ships any files
	# in /usr/lib/tmpfiles.d or /etc/tmpfiles.d
	if (-d $tmpdir) {
		my @dirs = grep { -d } map { "${tmpdir}/$_" } qw(usr/lib/tmpfiles.d etc/tmpfiles.d);
		find({
				wanted   => sub {
					my $name = $File::Find::name;
					return unless -f $name;
					$name =~ s/^\Q$tmpdir\E//g;
					push(@tmpfiles, $name);
				},
				no_chdir => 1,
			}, @dirs) if @dirs;
		if (@tmpfiles > 0) {
			autoscript($package, 'postinst', 'postinst-init-tmpfiles', { 'TMPFILES' => join(' ', sort @tmpfiles) });
		}
	}

	if (@enable_units) {
		for my $unit (sort @enable_units) {
			my $base = q{'} . basename($unit) . q{'};
			if ($dh{NO_ENABLE}) {
				autoscript($package, 'postinst', 'postinst-systemd-dont-enable', { 'UNITFILE' => $base },
					\%snippet_options);
			} else {
				autoscript($package, 'postinst', 'postinst-systemd-enable', { 'UNITFILE' => $base },
					\%snippet_options);
			}
		}
		my $enableunitargs = join(' ', sort map { q{'} . basename($_) . q{'} } @enable_units);
		autoscript($package, 'postrm', 'postrm-systemd', {'UNITFILES' => $enableunitargs });
	}
	
	if (@start_units) {
		# The $package and $sed parameters are always the same.
		# This wrapper function makes the following logic easier to read.
		my $startunitargs = join(' ', sort map { q{'} . basename($_) . q{'} } @start_units);
		my $start_autoscript = sub {
			my ($script, $filename) = @_;
			autoscript($package, $script, $filename, { 'UNITFILES' => $startunitargs },
				\%snippet_options);
		};

		if ($dh{RESTART_AFTER_UPGRADE}) {
				my $snippet = "postinst-systemd-restart" . ($dh{NO_START} ? "nostart" : "");
			$start_autoscript->("postinst", $snippet);
		} elsif (!$dh{NO_START}) {
			# We need to stop/start before/after the upgrade.
			$start_autoscript->("postinst", "postinst-systemd-start");
		}

		$start_autoscript->("postrm", "postrm-systemd-reload-only");

		if ($dh{R_FLAG} || $dh{RESTART_AFTER_UPGRADE}) {
			# stop service only on remove
			$start_autoscript->("prerm", "prerm-systemd-restart");
		} elsif (!$dh{NO_START}) {
			# always stop service
			$start_autoscript->("prerm", "prerm-systemd");
		}
	}
}

if (%requested_files) {
	my $any_missing = 0;
	for my $name (sort(keys(%requested_files))) {
		if (not exists($installed_files{$name})) {
			warning(qq{Requested unit "$name" but it was not found in any package acted on.});
			$any_missing = 1;
		}
	}
	error("Could not handle all of the requested services") if $any_missing;
}

=head1 SEE ALSO

L<debhelper(7)>

=head1 AUTHORS

pkg-systemd-maintainers@lists.alioth.debian.org

=cut
