# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2010-02-11 19:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING"

#. type: =head1
#: debhelper.pod:1 dh:3 dh_auto_build:3 dh_auto_clean:3 dh_auto_configure:3 dh_auto_install:3 dh_auto_test:3 dh_bugfiles:3 dh_builddeb:3 dh_clean:3 dh_compress:3 dh_desktop:3 dh_fixperms:3 dh_gconf:3 dh_gencontrol:3 dh_icons:3 dh_install:3 dh_installcatalogs:3 dh_installchangelogs:3 dh_installcron:3 dh_installdeb:3 dh_installdebconf:3 dh_installdirs:3 dh_installdocs:3 dh_installemacsen:3 dh_installexamples:3 dh_installifupdown:3 dh_installinfo:3 dh_installinit:3 dh_installlogcheck:3 dh_installlogrotate:3 dh_installman:3 dh_installmanpages:3 dh_installmenu:3 dh_installmime:3 dh_installmodules:3 dh_installpam:3 dh_installppp:3 dh_installudev:3 dh_installwm:3 dh_installxfonts:3 dh_link:3 dh_lintian:3 dh_listpackages:3 dh_makeshlibs:3 dh_md5sums:3 dh_movefiles:3 dh_perl:3 dh_prep:3 dh_python:3 dh_scrollkeeper:3 dh_shlibdeps:3 dh_strip:3 dh_suidregister:3 dh_testdir:3 dh_testroot:3 dh_testversion:3 dh_undocumented:3 dh_usrlocal:3
msgid "NAME"
msgstr ""

#. type: textblock
#: debhelper.pod:3
msgid "debhelper - the debhelper tool suite"
msgstr ""

#. type: =head1
#: debhelper.pod:5 dh:12 dh_auto_build:12 dh_auto_clean:12 dh_auto_configure:12 dh_auto_install:15 dh_auto_test:12 dh_bugfiles:12 dh_builddeb:12 dh_clean:12 dh_compress:13 dh_desktop:12 dh_fixperms:12 dh_gconf:12 dh_gencontrol:12 dh_icons:13 dh_install:13 dh_installcatalogs:14 dh_installchangelogs:12 dh_installcron:12 dh_installdeb:12 dh_installdebconf:12 dh_installdirs:12 dh_installdocs:12 dh_installemacsen:12 dh_installexamples:12 dh_installifupdown:12 dh_installinfo:12 dh_installinit:12 dh_installlogcheck:12 dh_installlogrotate:12 dh_installman:13 dh_installmanpages:13 dh_installmenu:12 dh_installmime:12 dh_installmodules:14 dh_installpam:12 dh_installppp:12 dh_installudev:13 dh_installwm:12 dh_installxfonts:12 dh_link:13 dh_lintian:12 dh_listpackages:12 dh_makeshlibs:12 dh_md5sums:13 dh_movefiles:12 dh_perl:14 dh_prep:12 dh_python:13 dh_scrollkeeper:12 dh_shlibdeps:13 dh_strip:13 dh_suidregister:7 dh_testdir:12 dh_testroot:7 dh_testversion:12 dh_undocumented:12 dh_usrlocal:15
msgid "SYNOPSIS"
msgstr ""

#. type: textblock
#: debhelper.pod:7
msgid ""
"B<dh_>I<*> [B<-v>] [B<-a>] [B<-i>] [B<-s>] [B<--no-act>] [B<-ppackage>] "
"[B<-Npackage] [-Ptmpdir>]"
msgstr ""

#. type: =head1
#: debhelper.pod:9 dh:16 dh_auto_build:16 dh_auto_clean:16 dh_auto_configure:16 dh_auto_install:19 dh_auto_test:16 dh_bugfiles:16 dh_builddeb:16 dh_clean:16 dh_compress:17 dh_desktop:16 dh_fixperms:16 dh_gconf:16 dh_gencontrol:16 dh_icons:17 dh_install:17 dh_installcatalogs:18 dh_installchangelogs:16 dh_installcron:16 dh_installdeb:16 dh_installdebconf:16 dh_installdirs:16 dh_installdocs:16 dh_installemacsen:16 dh_installexamples:16 dh_installifupdown:16 dh_installinfo:16 dh_installinit:16 dh_installlogcheck:16 dh_installlogrotate:16 dh_installman:17 dh_installmanpages:17 dh_installmenu:16 dh_installmime:16 dh_installmodules:18 dh_installpam:16 dh_installppp:16 dh_installudev:17 dh_installwm:16 dh_installxfonts:16 dh_link:17 dh_lintian:16 dh_listpackages:16 dh_makeshlibs:16 dh_md5sums:17 dh_movefiles:16 dh_perl:18 dh_prep:16 dh_python:17 dh_scrollkeeper:16 dh_shlibdeps:17 dh_strip:17 dh_suidregister:11 dh_testdir:16 dh_testroot:11 dh_testversion:16 dh_undocumented:16 dh_usrlocal:19
msgid "DESCRIPTION"
msgstr ""

#. type: textblock
#: debhelper.pod:11
msgid ""
"Debhelper is used to help you build a debian package. The philosophy behind "
"debhelper is to provide a collection of small, simple, and easily understood "
"tools that are used in debian/rules to automate various common aspects of "
"building a package. This means less work for you, the packager.  It also, to "
"some degree means that these tools can be changed if debian policy changes, "
"and packages that use them will require only a rebuild to comply with the "
"new policy."
msgstr ""

#. type: textblock
#: debhelper.pod:19
msgid ""
"A typical debian/rules file that uses debhelper will call several debhelper "
"commands in sequence, or use L<dh(1)> to automate this process. Examples of "
"rules files that use debhelper are in F</usr/share/doc/debhelper/examples/>"
msgstr ""

#. type: textblock
#: debhelper.pod:23
msgid ""
"To create a new debian package using debhelper, you can just copy one of the "
"sample rules files and edit it by hand. Or you can try the dh-make package, "
"which contains a L<dh_make|dh_make(1)> command that partially automates the "
"process. For a more gentle introduction, the maint-guide debian package "
"contains a tutorial about making your first package using debhelper."
msgstr ""

#. type: =head1
#: debhelper.pod:29
msgid "DEBHELPER COMMANDS"
msgstr ""

#. type: textblock
#: debhelper.pod:31
msgid ""
"Here is the list of debhelper commands you can use. See their man pages for "
"additional documentation."
msgstr ""

#. type: textblock
#: debhelper.pod:36
msgid "#LIST#"
msgstr ""

#. type: =head2
#: debhelper.pod:40
msgid "Deprecated Commands"
msgstr ""

#. type: textblock
#: debhelper.pod:42
msgid "A few debhelper commands are deprecated and should not be used."
msgstr ""

#. type: textblock
#: debhelper.pod:46
msgid "#LIST_DEPRECATED#"
msgstr ""

#. type: =head2
#: debhelper.pod:50
msgid "Other Commands"
msgstr ""

#. type: textblock
#: debhelper.pod:52
msgid ""
"If a program's name starts with \"dh_\", and the program is not on the above "
"lists, then it is not part of the debhelper package, but it should still "
"work like the other programs described on this page."
msgstr ""

#. type: =head1
#: debhelper.pod:56
msgid "DEBHELPER CONFIG FILES"
msgstr ""

#. type: textblock
#: debhelper.pod:58
msgid ""
"Many debhelper commands make use of files in F<debian/> to control what they "
"do. Besides the common F<debian/changelog> and F<debian/control>, which are "
"in all packages, not just those using debhelper, some additional files can "
"be used to configure the behavior of specific debhelper commands. These "
"files are typically named debian/package.foo (where \"package\" of course, "
"is replaced with the package that is being acted on)."
msgstr ""

#. type: textblock
#: debhelper.pod:65
msgid ""
"For example, dh_installdocs uses files named debian/package.docs to list the "
"documentation files it will install. See the man pages of individual "
"commands for details about the names and formats of the files they use.  "
"Generally, these files will list files to act on, one file per line. Some "
"programs in debhelper use pairs of files and destinations or slightly more "
"complicated formats."
msgstr ""

#. type: textblock
#: debhelper.pod:72
msgid ""
"Note that if a package is the first (or only) binary package listed in "
"debian/control, debhelper will use debian/foo if no debian/package.foo file "
"can be found."
msgstr ""

#. type: textblock
#: debhelper.pod:76
msgid ""
"In some rare cases, you may want to have different versions of these files "
"for different architectures or OSes. If files named debian/package.foo.ARCH "
"or debian/package.foo.OS exist, where \"ARCH\" and \"OS\" are the same as "
"the output of \"dpkg-architecture -qDEB_HOST_ARCH\" / \"dpkg-architecture "
"-qDEB_HOST_ARCH_OS\", then they will be used in preference to other, more "
"general files."
msgstr ""

#. type: textblock
#: debhelper.pod:83
msgid ""
"In many cases, these config files are used to specify various types of "
"files. Documentation or example files to install, files to move, and so on.  "
"When appropriate, in cases like these, you can use standard shell wildcard "
"characters ('?' and '*' and '[..]' character classes) in the files."
msgstr ""

#. type: textblock
#: debhelper.pod:88
msgid ""
"You can also put comments in these files; lines beginning with \"#\" are "
"ignored."
msgstr ""

#. type: =head1
#: debhelper.pod:91
msgid "SHARED DEBHELPER OPTIONS"
msgstr ""

#. type: textblock
#: debhelper.pod:93
msgid "The following command line options are supported by all debhelper programs."
msgstr ""

#. type: =item
#: debhelper.pod:97
msgid "B<-v>, B<--verbose>"
msgstr ""

#. type: textblock
#: debhelper.pod:99
msgid "Verbose mode: show all commands that modify the package build directory."
msgstr ""

#. type: =item
#: debhelper.pod:101 dh:80
msgid "B<--no-act>"
msgstr ""

#. type: textblock
#: debhelper.pod:103
msgid ""
"Do not really do anything. If used with -v, the result is that the command "
"will output what it would have done."
msgstr ""

#. type: =item
#: debhelper.pod:106
msgid "B<-a>, B<--arch>"
msgstr ""

#. type: textblock
#: debhelper.pod:108
msgid ""
"Act on architecture dependent packages that should be built for the build "
"architecture."
msgstr ""

#. type: =item
#: debhelper.pod:111
msgid "B<-i>, B<--indep>"
msgstr ""

#. type: textblock
#: debhelper.pod:113
msgid "Act on all architecture independent packages."
msgstr ""

#. type: =item
#: debhelper.pod:115
msgid "B<->I<ppackage>, B<--package=>I<package>"
msgstr ""

#. type: textblock
#: debhelper.pod:117
msgid ""
"Act on the package named \"package\". This option may be specified multiple "
"times to make debhelper operate on a given set of packages."
msgstr ""

#. type: =item
#: debhelper.pod:120
msgid "B<-s>, B<--same-arch>"
msgstr ""

#. type: textblock
#: debhelper.pod:122
msgid ""
"This used to be a smarter version of the -a flag, but the -a flag is now "
"equally smart."
msgstr ""

#. type: =item
#: debhelper.pod:125
msgid "B<-N>I<package>, B<--no-package=>I<package>"
msgstr ""

#. type: textblock
#: debhelper.pod:127
msgid ""
"Do not act on the specified package even if an -a, -i, or -p option lists "
"the package as one that should be acted on."
msgstr ""

#. type: =item
#: debhelper.pod:130
msgid "B<--remaining-packages>"
msgstr ""

#. type: textblock
#: debhelper.pod:132
msgid ""
"Do not act on the packages which have already been acted on by this "
"debhelper command earlier (i.e. if the command is present in the package "
"debhelper log).  For example, if you need to call the command with special "
"options only for a couple of binary packages, pass this option to the last "
"call of the command to process the rest of packages with default settings."
msgstr ""

#. type: =item
#: debhelper.pod:138
msgid "B<--ignore=>I<file>"
msgstr ""

#. type: textblock
#: debhelper.pod:140
msgid ""
"Ignore the specified file. This can be used if debian/ contains a debhelper "
"config file that a debhelper command should not act on. Note that "
"debian/compat, debian/control, and debian/changelog can't be ignored, but "
"then, there should never be a reason to ignore those files."
msgstr ""

#. type: textblock
#: debhelper.pod:145
msgid ""
"For example, if upstream ships a debian/init that you don't want "
"dh_installinit to install, use --ignore=debian/init"
msgstr ""

#. type: =item
#: debhelper.pod:148
msgid "B<-P>I<tmpdir>, B<--tmpdir=>I<tmpdir>"
msgstr ""

#. type: textblock
#: debhelper.pod:150
msgid "Use \"tmpdir\" for package build directory. The default is debian/<package>"
msgstr ""

#. type: =item
#: debhelper.pod:152
msgid "B<--mainpackage=>I<package>"
msgstr ""

#. type: textblock
#: debhelper.pod:154
msgid ""
"This little-used option changes the package which debhelper considers the "
"\"main package\", that is, the first one listed in debian/control, and the "
"one for which debian/foo files can be used instead of the usual "
"debian/package.foo files."
msgstr ""

#. type: =item
#: debhelper.pod:159
msgid "B<-O=>I<option|bundle>"
msgstr ""

#. type: textblock
#: debhelper.pod:161
msgid ""
"This is used by L<dh(1)> when passing user-specified options to all the "
"commands it runs. If the command supports the specified option or option "
"bundle, it will take effect. If the command does not support the option (or "
"any part of an option bundle), it will be ignored."
msgstr ""

#. type: =head1
#: debhelper.pod:168
msgid "COMMON DEBHELPER OPTIONS"
msgstr ""

#. type: textblock
#: debhelper.pod:170
msgid ""
"The following command line options are supported by some debhelper "
"programs.  See the man page of each program for a complete explanation of "
"what each option does."
msgstr ""

#. type: =item
#: debhelper.pod:176
msgid "B<-n>"
msgstr ""

#. type: textblock
#: debhelper.pod:178
msgid "Do not modify postinst/postrm/etc scripts."
msgstr ""

#. type: =item
#: debhelper.pod:180 dh_compress:50 dh_makeshlibs:76 dh_md5sums:37 dh_shlibdeps:30 dh_strip:39
msgid "B<-X>I<item>, B<--exclude=>I<item>"
msgstr ""

#. type: textblock
#: debhelper.pod:182
msgid ""
"Exclude an item from processing. This option may be used multiple times, to "
"exclude more than one thing."
msgstr ""

#. type: =item
#: debhelper.pod:185 dh_bugfiles:54 dh_compress:58 dh_installdirs:35 dh_installdocs:64 dh_installexamples:36 dh_installinfo:35 dh_installman:64 dh_link:55
msgid "B<-A>, B<--all>"
msgstr ""

#. type: textblock
#: debhelper.pod:187
msgid ""
"Makes files or other items that are specified on the command line take "
"effect in ALL packages acted on, not just the first."
msgstr ""

#. type: =head1
#: debhelper.pod:192
msgid "BUILD SYSTEM OPTIONS"
msgstr ""

#. type: textblock
#: debhelper.pod:194
msgid ""
"The following command line options are supported by all of the dh_auto_* "
"debhelper programs. These programs support a variety of build systems, and "
"normally heuristically determine which to use, and how to use them.  You can "
"use these command line options to override the default behavior."
msgstr ""

#. type: =item
#: debhelper.pod:201
msgid "B<-S>I<buildsystem>, B<--buildsystem=>I<buildsystem>"
msgstr ""

#. type: textblock
#: debhelper.pod:203
msgid ""
"Force use of the specified I<buildsystem>, instead of trying to auto-select "
"one which might be applicable for the package."
msgstr ""

#. type: =item
#: debhelper.pod:206
msgid "B<-D>I<directory>, B<--sourcedirectory=>I<directory>"
msgstr ""

#. type: textblock
#: debhelper.pod:208
msgid ""
"Assume that the original package source tree is at the specified "
"I<directory> rather than the top level directory of the Debian source "
"package tree."
msgstr ""

#. type: =item
#: debhelper.pod:212
msgid "B<-B>[I<directory>], B<--builddirectory>=[I<directory>]"
msgstr ""

#. type: textblock
#: debhelper.pod:214
msgid ""
"Enable out of source building and use the specified I<directory> as the "
"build directory. If I<directory> parameter is omitted, a default build "
"directory will chosen."
msgstr ""

#. type: textblock
#: debhelper.pod:218
msgid ""
"If this option is not specified, building will be done in source by default "
"unless the build system requires or prefers out of source tree building.  In "
"such a case, the default build directory will be used even if "
"L<--builddirectory> is not specified."
msgstr ""

#. type: textblock
#: debhelper.pod:223
msgid ""
"If the build system prefers out of source tree building but still allows in "
"source building, the latter can be re-enabled by passing a build directory "
"path that is the same as the source directory path."
msgstr ""

#. type: =item
#: debhelper.pod:227
msgid "B<--parallel>"
msgstr ""

#. type: textblock
#: debhelper.pod:229
msgid ""
"Enable parallel builds if underlying build system supports them.  The number "
"of parallel jobs is controlled by the DEB_BUILD_OPTIONS environment variable "
"(L<Debian Policy, section 4.9.1>) at build time. It might also be subject to "
"a build system specific limit."
msgstr ""

#. type: textblock
#: debhelper.pod:234
msgid ""
"If this option is not specified, debhelper currently defaults to not "
"allowing parallel package builds."
msgstr ""

#. type: =item
#: debhelper.pod:237
msgid "B<--max-parallel>I<=maximum>"
msgstr ""

#. type: textblock
#: debhelper.pod:239
msgid ""
"This option implies L<--parallel> and allows further limiting the number of "
"jobs that can be used in a parallel build. If the package build is known to "
"only work with certain levels of concurrency, you can set this to the "
"maximum level that is known to work, or that you wish to support."
msgstr ""

#. type: =item
#: debhelper.pod:244 dh:60
msgid "B<--list>, B<-l>"
msgstr ""

#. type: textblock
#: debhelper.pod:246
msgid ""
"List all build systems supported by debhelper on this system. The list "
"includes both default and third party build systems (marked as such). Also "
"shows which build system would be automatically selected, or which one is "
"manually specified with the I<--buildsystem> option."
msgstr ""

#. type: =head1
#: debhelper.pod:253 dh_auto_test:44 dh_installcatalogs:59 dh_installdocs:110 dh_installemacsen:67 dh_installexamples:53 dh_installinit:141 dh_installman:81 dh_installmime:51 dh_installmodules:60 dh_installudev:55 dh_installwm:54 dh_installxfonts:37 dh_movefiles:64 dh_strip:68 dh_usrlocal:49
msgid "NOTES"
msgstr ""

#. type: =head2
#: debhelper.pod:255
msgid "Multiple binary package support"
msgstr ""

#. type: textblock
#: debhelper.pod:257
msgid ""
"If your source package generates more than one binary package, debhelper "
"programs will default to acting on all binary packages when run. If your "
"source package happens to generate one architecture dependent package, and "
"another architecture independent package, this is not the correct behavior, "
"because you need to generate the architecture dependent packages in the "
"binary-arch debian/rules target, and the architecture independent packages "
"in the binary-indep debian/rules target."
msgstr ""

#. type: textblock
#: debhelper.pod:265
msgid ""
"To facilitate this, as well as give you more control over which packages are "
"acted on by debhelper programs, all debhelper programs accept the B<-a>, "
"B<-i>, B<-p>, and B<-s> parameters. These parameters are cumulative.  If "
"none are given, debhelper programs default to acting on all packages listed "
"in the control file."
msgstr ""

#. type: =head2
#: debhelper.pod:271
msgid "Automatic generation of debian install scripts"
msgstr ""

#. type: textblock
#: debhelper.pod:273
msgid ""
"Some debhelper commands will automatically generate parts of debian "
"maintainer scripts. If you want these automatically generated things "
"included in your existing debian maintainer scripts, then you need to add "
"\"#DEBHELPER#\" to your scripts, in the place the code should be added.  "
"\"#DEBHELPER#\" will be replaced by any auto-generated code when you run "
"dh_installdeb."
msgstr ""

#. type: textblock
#: debhelper.pod:280
msgid ""
"If a script does not exist at all and debhelper needs to add something to "
"it, then debhelper will create the complete script."
msgstr ""

#. type: textblock
#: debhelper.pod:283
msgid ""
"All debhelper commands that automatically generate code in this way let it "
"be disabled by the -n parameter (see above)."
msgstr ""

#. type: textblock
#: debhelper.pod:286
msgid ""
"Note that the inserted code will be shell code, so you cannot directly use "
"it in a perl script. If you would like to embed it into a perl script, here "
"is one way to do that (note that I made sure that $1, $2, etc are set with "
"the set command):"
msgstr ""

#. type: verbatim
#: debhelper.pod:291
#, no-wrap
msgid ""
"  my $temp=\"set -e\\nset -- @ARGV\\n\" . << 'EOF';\n"
"  #DEBHELPER#\n"
"  EOF\n"
"  system ($temp) / 256 == 0\n"
"  \tor die \"Problem with debhelper scripts: $!\";\n"
"\n"
msgstr ""

#. type: =head2
#: debhelper.pod:297
msgid "Automatic generation of miscellaneous dependencies."
msgstr ""

#. type: textblock
#: debhelper.pod:299
msgid ""
"Some debhelper commands may make the generated package need to depend on "
"some other packages. For example, if you use L<dh_installdebconf(1)>, your "
"package will generally need to depend on debconf. Or if you use "
"L<dh_installxfonts(1)>, your package will generally need to depend on a "
"particular version of xutils. Keeping track of these miscellaneous "
"dependencies can be annoying since they are dependant on how debhelper does "
"things, so debhelper offers a way to automate it."
msgstr ""

#. type: textblock
#: debhelper.pod:307
msgid ""
"All commands of this type, besides documenting what dependencies may be "
"needed on their man pages, will automatically generate a substvar called "
"${misc:Depends}. If you put that token into your debian/control file, it "
"will be expanded to the dependencies debhelper figures you need."
msgstr ""

#. type: textblock
#: debhelper.pod:312
msgid ""
"This is entirely independent of the standard ${shlibs:Depends} generated by "
"L<dh_makeshlibs(1)>, and the ${perl:Depends} generated by L<dh_perl(1)>.  "
"You can choose not to use any of these, if debhelper's guesses don't match "
"reality."
msgstr ""

#. type: =head2
#: debhelper.pod:317
msgid "Package build directories"
msgstr ""

#. type: textblock
#: debhelper.pod:319
msgid ""
"By default, all debhelper programs assume that the temporary directory used "
"for assembling the tree of files in a package is debian/<package>."
msgstr ""

#. type: textblock
#: debhelper.pod:322
msgid ""
"Sometimes, you might want to use some other temporary directory. This is "
"supported by the -P flag. For example, \"dh_installdocs -Pdebian/tmp\", will "
"use debian/tmp as the temporary directory. Note that if you use -P, the "
"debhelper programs can only be acting on a single package at a time. So if "
"you have a package that builds many binary packages, you will need to also "
"use the -p flag to specify which binary package the debhelper program will "
"act on."
msgstr ""

#. type: =head2
#: debhelper.pod:330
msgid "Debhelper compatibility levels"
msgstr ""

#. type: textblock
#: debhelper.pod:332
msgid ""
"From time to time, major non-backwards-compatible changes need to be made to "
"debhelper, to keep it clean and well-designed as needs change and its author "
"gains more experience. To prevent such major changes from breaking existing "
"packages, the concept of debhelper compatibility levels was introduced. You "
"tell debhelper which compatibility level it should use, and it modifies its "
"behavior in various ways."
msgstr ""

#. type: textblock
#: debhelper.pod:339
msgid ""
"Tell debhelper what compatibility level to use by writing a number to "
"debian/compat. For example, to turn on V7 mode:"
msgstr ""

#. type: verbatim
#: debhelper.pod:342
#, no-wrap
msgid ""
"  % echo 7 > debian/compat\n"
"\n"
msgstr ""

#. type: textblock
#: debhelper.pod:344
msgid ""
"Unless otherwise indicated, all debhelper documentation assumes that you are "
"using the most recent compatibility level, and in most cases does not "
"indicate if the behavior is different in an earlier compatibility level, so "
"if you are not using the most recent compatibility level, you're advised to "
"read below for notes about what is different in earlier compatibility "
"levels."
msgstr ""

#. type: textblock
#: debhelper.pod:351
msgid "These are the available compatibility levels:"
msgstr ""

#. type: =item
#: debhelper.pod:355
msgid "V1"
msgstr ""

#. type: textblock
#: debhelper.pod:357
msgid ""
"This is the original debhelper compatibility level, and so it is the default "
"one. In this mode, debhelper will use debian/tmp as the package tree "
"directory for the first binary package listed in the control file, while "
"using debian/<package> for all other packages listed in the control file."
msgstr ""

#. type: textblock
#: debhelper.pod:362 debhelper.pod:369 debhelper.pod:392 debhelper.pod:421
msgid "This mode is deprecated."
msgstr ""

#. type: =item
#: debhelper.pod:364
msgid "V2"
msgstr ""

#. type: textblock
#: debhelper.pod:366
msgid ""
"In this mode, debhelper will consistently use debian/<package> as the "
"package tree directory for every package that is built."
msgstr ""

#. type: =item
#: debhelper.pod:371
msgid "V3"
msgstr ""

#. type: textblock
#: debhelper.pod:373
msgid "This mode works like V2, with the following additions:"
msgstr ""

#. type: =item
#: debhelper.pod:377 debhelper.pod:382 debhelper.pod:386 debhelper.pod:400 debhelper.pod:405 debhelper.pod:410 debhelper.pod:415 debhelper.pod:429 debhelper.pod:433 debhelper.pod:438 debhelper.pod:442 debhelper.pod:454 debhelper.pod:459 debhelper.pod:465 debhelper.pod:471 debhelper.pod:486 debhelper.pod:493 debhelper.pod:497 debhelper.pod:501
msgid "-"
msgstr ""

#. type: textblock
#: debhelper.pod:379
msgid ""
"Debhelper config files support globbing via * and ?, when appropriate. To "
"turn this off and use those characters raw, just prefix with a backslash."
msgstr ""

#. type: textblock
#: debhelper.pod:384
msgid "dh_makeshlibs makes the postinst and postrm scripts call ldconfig."
msgstr ""

#. type: textblock
#: debhelper.pod:388
msgid "Every file in etc/ is automatically flagged as a conffile by dh_installdeb."
msgstr ""

#. type: =item
#: debhelper.pod:394
msgid "V4"
msgstr ""

#. type: textblock
#: debhelper.pod:396
msgid "Changes from V3 are:"
msgstr ""

#. type: textblock
#: debhelper.pod:402
msgid ""
"dh_makeshlibs -V will not include the debian part of the version number in "
"the generated dependency line in the shlibs file."
msgstr ""

#. type: textblock
#: debhelper.pod:407
msgid ""
"You are encouraged to put the new ${misc:Depends} into debian/control to "
"supplement the ${shlibs:Depends} field."
msgstr ""

#. type: textblock
#: debhelper.pod:412
msgid ""
"dh_fixperms will make all files in bin/ directories and in etc/init.d "
"executable."
msgstr ""

#. type: textblock
#: debhelper.pod:417
msgid "dh_link will correct existing links to conform with policy."
msgstr ""

#. type: =item
#: debhelper.pod:423
msgid "V5"
msgstr ""

#. type: textblock
#: debhelper.pod:425
msgid "Changes from V4 are:"
msgstr ""

#. type: textblock
#: debhelper.pod:431
msgid "Comments are ignored in debhelper config files."
msgstr ""

#. type: textblock
#: debhelper.pod:435
msgid ""
"dh_strip --dbg-package now specifies the name of a package to put debugging "
"symbols in, not the packages to take the symbols from."
msgstr ""

#. type: textblock
#: debhelper.pod:440
msgid "dh_installdocs skips installing empty files."
msgstr ""

#. type: textblock
#: debhelper.pod:444
msgid "dh_install errors out if wildcards expand to nothing."
msgstr ""

#. type: =item
#: debhelper.pod:448
msgid "V6"
msgstr ""

#. type: textblock
#: debhelper.pod:450
msgid "Changes from V5 are:"
msgstr ""

#. type: textblock
#: debhelper.pod:456
msgid ""
"Commands that generate maintainer script fragments will order the fragments "
"in reverse order for the prerm and postrm scripts."
msgstr ""

#. type: textblock
#: debhelper.pod:461
msgid ""
"dh_installwm will install a slave manpage link for x-window-manager.1.gz, if "
"it sees the man page in usr/share/man/man1 in the package build directory."
msgstr ""

#. type: textblock
#: debhelper.pod:467
msgid ""
"dh_builddeb did not previously delete everything matching DH_ALWAYS_EXCLUDE, "
"if it was set to a list of things to exclude, such as \"CVS:.svn:.git\". Now "
"it does."
msgstr ""

#. type: textblock
#: debhelper.pod:473
msgid ""
"dh_installman allows overwriting existing man pages in the package build "
"directory. In previous compatibility levels it silently refuses to do this."
msgstr ""

#. type: =item
#: debhelper.pod:478
msgid "V7"
msgstr ""

#. type: textblock
#: debhelper.pod:480
msgid "This is the recommended mode of operation."
msgstr ""

#. type: textblock
#: debhelper.pod:482
msgid "Changes from V6 are:"
msgstr ""

#. type: textblock
#: debhelper.pod:488
msgid ""
"dh_install, will fall back to looking for files in debian/tmp if it doesn't "
"find them in the current directory (or wherever you tell it look using "
"--sourcedir). This allows dh_install to interoperate with dh_auto_install, "
"which installs to debian/tmp, without needing any special parameters."
msgstr ""

#. type: textblock
#: debhelper.pod:495
msgid "dh_clean will read debian/clean and delete files listed there."
msgstr ""

#. type: textblock
#: debhelper.pod:499
msgid "dh_clean will delete toplevel *-stamp files."
msgstr ""

#. type: textblock
#: debhelper.pod:503
msgid ""
"dh_installchangelogs will guess at what file is the upstream changelog if "
"none is specified."
msgstr ""

#. type: =head2
#: debhelper.pod:510
msgid "udebs"
msgstr ""

#. type: textblock
#: debhelper.pod:512
msgid ""
"Debhelper includes support for udebs. To create a udeb with debhelper, add "
"\"XC-Package-Type: udeb\" to the package's stanza in debian/control, and "
"build-depend on debhelper (>= 4.2). Debhelper will try to create udebs that "
"comply with debian-installer policy, by making the generated package files "
"end in \".udeb\", not installing any documentation into a udeb, skipping "
"over preinst, postrm, prerm, and config scripts, etc."
msgstr ""

#. type: =head2
#: debhelper.pod:519
msgid "Other notes"
msgstr ""

#. type: textblock
#: debhelper.pod:521
msgid ""
"In general, if any debhelper program needs a directory to exist under "
"debian/, it will create it. I haven't bothered to document this in all the "
"man pages, but for example, dh_installdeb knows to make "
"debian/<package>/DEBIAN/ before trying to put files there, dh_installmenu "
"knows you need a debian/<package>/usr/share/menu/ before installing the menu "
"files, etc."
msgstr ""

#. type: textblock
#: debhelper.pod:527
msgid ""
"Once your package uses debhelper to build, be sure to add debhelper to your "
"Build-Depends line in debian/control. You should build-depend on a version "
"of debhelper equal to (or greater than) the debhelper compatibility level "
"your package uses. So if your package used compatibility level 7:"
msgstr ""

#. type: verbatim
#: debhelper.pod:533
#, no-wrap
msgid ""
"  Build-Depends: debhelper (>= 7)\n"
"\n"
msgstr ""

#. type: =head1
#: debhelper.pod:535
msgid "ENVIRONMENT"
msgstr ""

#. type: =item
#: debhelper.pod:539
msgid "DH_VERBOSE"
msgstr ""

#. type: textblock
#: debhelper.pod:541
msgid ""
"Set to 1 to enable verbose mode. Debhelper will output every command it runs "
"that modifies files on the build system."
msgstr ""

#. type: =item
#: debhelper.pod:544
msgid "DH_COMPAT"
msgstr ""

#. type: textblock
#: debhelper.pod:546
msgid ""
"Temporarily specifies what compatibility level debhelper should run at, "
"overriding any value in debian/compat."
msgstr ""

#. type: =item
#: debhelper.pod:549
msgid "DH_NO_ACT"
msgstr ""

#. type: textblock
#: debhelper.pod:551
msgid "Set to 1 to enable no-act mode."
msgstr ""

#. type: =item
#: debhelper.pod:553
msgid "DH_OPTIONS"
msgstr ""

#. type: textblock
#: debhelper.pod:555
msgid ""
"Anything in this variable will be prepended to the command line arguments of "
"all debhelper commands. Command-specific options will be ignored by commands "
"that do not support them."
msgstr ""

#. type: textblock
#: debhelper.pod:559
msgid ""
"This is useful in some situations, for example, if you need to pass -p to "
"all debhelper commands that will be run. One good way to set DH_OPTIONS is "
"by using \"Target-specific Variable Values\" in your debian/rules file. See "
"the make documentation for details on doing this."
msgstr ""

#. type: =item
#: debhelper.pod:564
msgid "DH_ALWAYS_EXCLUDE"
msgstr ""

#. type: textblock
#: debhelper.pod:566
msgid ""
"If set, this adds the value the variable is set to to the -X options of all "
"commands that support the -X option. Moreover, dh_builddeb will rm -rf "
"anything that matches the value in your package build tree."
msgstr ""

#. type: textblock
#: debhelper.pod:570
msgid ""
"This can be useful if you are doing a build from a CVS source tree, in which "
"case setting DH_ALWAYS_EXCLUDE=CVS will prevent any CVS directories from "
"sneaking into the package you build. Or, if a package has a source tarball "
"that (unwisely) includes CVS directories, you might want to export "
"DH_ALWAYS_EXCLUDE=CVS in debian/rules, to make it take effect wherever your "
"package is built."
msgstr ""

#. type: textblock
#: debhelper.pod:577
msgid ""
"Multiple things to exclude can be separated with colons, as in "
"DH_ALWAYS_EXCLUDE=CVS:.svn"
msgstr ""

#. type: =head1
#: debhelper.pod:582 dh:678 dh_auto_build:47 dh_auto_clean:48 dh_auto_configure:53 dh_auto_install:85 dh_auto_test:58 dh_bugfiles:122 dh_builddeb:91 dh_clean:138 dh_compress:202 dh_desktop:31 dh_fixperms:122 dh_gconf:110 dh_gencontrol:82 dh_icons:65 dh_install:274 dh_installcatalogs:116 dh_installchangelogs:169 dh_installcron:77 dh_installdeb:108 dh_installdebconf:126 dh_installdirs:86 dh_installdocs:301 dh_installemacsen:124 dh_installexamples:106 dh_installifupdown:69 dh_installinfo:77 dh_installinit:320 dh_installlogcheck:66 dh_installlogrotate:50 dh_installman:253 dh_installmanpages:197 dh_installmenu:87 dh_installmime:95 dh_installmodules:124 dh_installpam:59 dh_installppp:65 dh_installudev:125 dh_installwm:108 dh_installxfonts:87 dh_link:226 dh_lintian:57 dh_listpackages:29 dh_makeshlibs:237 dh_md5sums:89 dh_movefiles:170 dh_perl:145 dh_prep:60 dh_python:280 dh_scrollkeeper:28 dh_shlibdeps:171 dh_strip:227 dh_suidregister:117 dh_testdir:44 dh_testroot:27 dh_testversion:75 dh_undocumented:28 dh_usrlocal:114
msgid "SEE ALSO"
msgstr ""

#. type: =item
#: debhelper.pod:586
msgid "F</usr/share/doc/debhelper/examples/>"
msgstr ""

#. type: textblock
#: debhelper.pod:588
msgid "A set of example debian/rules files that use debhelper."
msgstr ""

#. type: =item
#: debhelper.pod:590
msgid "L<http://kitenet.net/~joey/code/debhelper/>"
msgstr ""

#. type: textblock
#: debhelper.pod:592
msgid "Debhelper web site."
msgstr ""

#. type: =head1
#: debhelper.pod:596 dh:684 dh_auto_build:53 dh_auto_clean:54 dh_auto_configure:59 dh_auto_install:91 dh_auto_test:64 dh_bugfiles:130 dh_builddeb:97 dh_clean:144 dh_compress:208 dh_desktop:37 dh_fixperms:128 dh_gconf:116 dh_gencontrol:88 dh_icons:71 dh_install:280 dh_installcatalogs:122 dh_installchangelogs:175 dh_installcron:83 dh_installdeb:114 dh_installdebconf:132 dh_installdirs:92 dh_installdocs:307 dh_installemacsen:130 dh_installexamples:112 dh_installifupdown:75 dh_installinfo:83 dh_installlogcheck:72 dh_installlogrotate:56 dh_installman:259 dh_installmanpages:203 dh_installmenu:95 dh_installmime:101 dh_installmodules:130 dh_installpam:65 dh_installppp:71 dh_installudev:131 dh_installwm:114 dh_installxfonts:93 dh_link:232 dh_lintian:65 dh_listpackages:35 dh_makeshlibs:243 dh_md5sums:95 dh_movefiles:176 dh_perl:151 dh_prep:66 dh_python:286 dh_scrollkeeper:34 dh_shlibdeps:177 dh_strip:233 dh_suidregister:123 dh_testdir:50 dh_testroot:33 dh_testversion:81 dh_undocumented:34 dh_usrlocal:120
msgid "AUTHOR"
msgstr ""

#. type: textblock
#: debhelper.pod:598 dh:686 dh_auto_build:55 dh_auto_clean:56 dh_auto_configure:61 dh_auto_install:93 dh_auto_test:66 dh_builddeb:99 dh_clean:146 dh_compress:210 dh_fixperms:130 dh_gencontrol:90 dh_install:282 dh_installchangelogs:177 dh_installcron:85 dh_installdeb:116 dh_installdebconf:134 dh_installdirs:94 dh_installdocs:309 dh_installemacsen:132 dh_installexamples:114 dh_installifupdown:77 dh_installinfo:85 dh_installinit:328 dh_installlogrotate:58 dh_installman:261 dh_installmanpages:205 dh_installmenu:97 dh_installmime:103 dh_installmodules:132 dh_installpam:67 dh_installppp:73 dh_installudev:133 dh_installwm:116 dh_installxfonts:95 dh_link:234 dh_listpackages:37 dh_makeshlibs:245 dh_md5sums:97 dh_movefiles:178 dh_prep:68 dh_shlibdeps:179 dh_strip:235 dh_suidregister:125 dh_testdir:52 dh_testroot:35 dh_testversion:83 dh_undocumented:36
msgid "Joey Hess <joeyh@debian.org>"
msgstr ""

#. type: textblock
#: dh:5
msgid "dh - debhelper command sequencer"
msgstr ""

#. type: textblock
#: dh:14
msgid ""
"B<dh> sequence [B<--with> I<addon>[,I<addon>,...]] [B<--list>] [B<--until> "
"I<cmd>] [B<--before> I<cmd>] [B<--after> I<cmd>] [B<--remaining>] "
"[S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh:18
msgid ""
"dh runs a sequence of debhelper commands. The supported sequences correspond "
"to the targets of a debian/rules file: \"build\", \"clean\", \"install\", "
"\"binary-arch\", \"binary-indep\", and \"binary\"."
msgstr ""

#. type: textblock
#: dh:22
msgid ""
"Commands in the binary-indep sequence are passed the \"-i\" option to ensure "
"they only work on binary independent packages, and commands in the "
"binary-arch sequences are passed the \"-a\" option to ensure they only work "
"on architecture dependent packages."
msgstr ""

#. type: textblock
#: dh:27
msgid ""
"Each debhelper command will record when it's successfully run in "
"debian/package.debhelper.log. (Which dh_clean deletes.) So dh can tell which "
"commands have already been run, for which packages, and skip running those "
"commands again."
msgstr ""

#. type: textblock
#: dh:32
msgid ""
"Each time dh is run, it examines the log, and finds the last logged command "
"that is in the specified sequence. It then continues with the next command "
"in the sequence. The B<--until>, B<--before>, B<--after>, and B<--remaining> "
"options can override this behavior."
msgstr ""

#. type: textblock
#: dh:37
msgid ""
"If debian/rules contains a target with a name like "
"\"override_I<dh_command>\", then when it would normally run I<dh_command>, "
"dh will instead call that target. The override target can then run the "
"command with additional options, or run entirely different commands "
"instead. See examples below. (Note that to use this feature, you should "
"Build-Depend on debhelper 7.0.50 or above.)"
msgstr ""

#. type: =head1
#: dh:43 dh_auto_build:28 dh_auto_clean:29 dh_auto_configure:31 dh_auto_install:43 dh_auto_test:30 dh_bugfiles:50 dh_builddeb:21 dh_clean:41 dh_compress:46 dh_fixperms:31 dh_gconf:45 dh_gencontrol:26 dh_icons:25 dh_install:54 dh_installcatalogs:49 dh_installchangelogs:56 dh_installcron:40 dh_installdebconf:61 dh_installdirs:31 dh_installdocs:60 dh_installemacsen:48 dh_installexamples:32 dh_installifupdown:39 dh_installinfo:31 dh_installinit:48 dh_installlogrotate:22 dh_installman:60 dh_installmanpages:40 dh_installmenu:41 dh_installmime:41 dh_installmodules:44 dh_installpam:31 dh_installppp:35 dh_installudev:35 dh_installwm:34 dh_link:51 dh_makeshlibs:38 dh_md5sums:28 dh_movefiles:38 dh_perl:31 dh_prep:26 dh_python:39 dh_shlibdeps:26 dh_strip:35 dh_testdir:23 dh_testversion:34 dh_usrlocal:39
msgid "OPTIONS"
msgstr ""

#. type: =item
#: dh:47
msgid "B<--with> I<addon>[,I<addon>,...]"
msgstr ""

#. type: textblock
#: dh:49
msgid ""
"Add the debhelper commands specified by the given addon to appropriate "
"places in the sequence of commands that is run. This option can be repeated "
"more than once, or multiple addons can be listed, separated by commas.  This "
"is used when there is a third-party package that provides debhelper "
"commands. See the PROGRAMMING file for documentation about the sequence "
"addon interface."
msgstr ""

#. type: =item
#: dh:56
msgid "B<--without> I<addon>"
msgstr ""

#. type: textblock
#: dh:58
msgid "The inverse of --with, disables using the given addon."
msgstr ""

#. type: textblock
#: dh:62
msgid "List all available addons."
msgstr ""

#. type: =item
#: dh:64
msgid "B<--until> I<cmd>"
msgstr ""

#. type: textblock
#: dh:66
msgid "Run commands in the sequence until and including I<cmd>, then stop."
msgstr ""

#. type: =item
#: dh:68
msgid "B<--before> I<cmd>"
msgstr ""

#. type: textblock
#: dh:70
msgid "Run commands in the sequence before I<cmd>, then stop."
msgstr ""

#. type: =item
#: dh:72
msgid "B<--after> I<cmd>"
msgstr ""

#. type: textblock
#: dh:74
msgid "Run commands in the sequence that come after I<cmd>."
msgstr ""

#. type: =item
#: dh:76
msgid "B<--remaining>"
msgstr ""

#. type: textblock
#: dh:78
msgid "Run all commands in the sequence that have yet to be run."
msgstr ""

#. type: textblock
#: dh:82
msgid "Prints commands that would run for a given sequence, but does not run them."
msgstr ""

#. type: textblock
#: dh:86
msgid ""
"All other options passed to dh are passed on to each command it runs. This "
"can be used to set an option like \"-v\" or \"-X\" or \"-N\", as well as for "
"more specialised options."
msgstr ""

#. type: textblock
#: dh:90
msgid ""
"In the above options, I<cmd> can be a full name of a debhelper command, or a "
"substring. It'll first search for a command in the sequence exactly matching "
"the name, to avoid any ambiguity. If there are multiple substring matches, "
"the last one in the sequence will be used."
msgstr ""

#. type: =head1
#: dh:121 dh_installdocs:99 dh_link:73 dh_makeshlibs:92 dh_shlibdeps:69
msgid "EXAMPLES"
msgstr ""

#. type: textblock
#: dh:123
msgid ""
"To see what commands are included in a sequence, without actually doing "
"anything:"
msgstr ""

#. type: verbatim
#: dh:126
#, no-wrap
msgid ""
"\tdh binary-arch --no-act\n"
"\n"
msgstr ""

#. type: textblock
#: dh:128
msgid ""
"This is a very simple rules file, for packages where the default sequences "
"of commands work with no additional options."
msgstr ""

#. type: verbatim
#: dh:131 dh:138 dh:152 dh:165
#, no-wrap
msgid ""
"\t#!/usr/bin/make -f\n"
"\t%:\n"
"\t\tdh $@\n"
"\n"
msgstr ""

#. type: verbatim
#: dh:135
#, no-wrap
msgid ""
"Often you'll want to pass an option to a specific debhelper command. The\n"
"easy way to do with is by adding an override target for that command.\n"
"\t\n"
msgstr ""

#. type: verbatim
#: dh:142
#, no-wrap
msgid ""
"\toverride_dh_strip:\n"
"\t\tdh_strip -Xfoo\n"
"\t\t\n"
msgstr ""

#. type: verbatim
#: dh:145
#, no-wrap
msgid ""
"\toverride_dh_installdocs:\n"
"\t\tdh_installdocs README TODO\n"
"\n"
msgstr ""

#. type: textblock
#: dh:148
msgid ""
"Sometimes the automated dh_auto_configure and dh_auto_build can't guess what "
"to do for a strange package. Here's how to avoid running either and instead "
"run your own commands."
msgstr ""

#. type: verbatim
#: dh:156
#, no-wrap
msgid ""
"\toverride_dh_auto_configure:\n"
"\t\t./mondoconfig\n"
"\n"
msgstr ""

#. type: verbatim
#: dh:159
#, no-wrap
msgid ""
"\toverride_dh_auto_build:\n"
"\t\tmake universe-explode-in-delight\n"
"\n"
msgstr ""

#. type: textblock
#: dh:162
msgid ""
"Another common case is wanting to do something manually before or after a "
"particular debhelper command is run."
msgstr ""

#. type: verbatim
#: dh:169
#, no-wrap
msgid ""
"\toverride_dh_fixperms:\n"
"\t\tdh_fixperms\n"
"\t\tchmod 4755 debian/foo/usr/bin/foo\n"
"\n"
msgstr ""

#. type: textblock
#: dh:173
msgid ""
"If your package is a python package, dh will use dh_pysupport by "
"default. This is how to use dh_pycentral instead."
msgstr ""

#. type: verbatim
#: dh:176
#, no-wrap
msgid ""
"\t#!/usr/bin/make -f\n"
"\t%:\n"
"\t\tdh $@ --with python-central\n"
"\n"
msgstr ""

#. type: textblock
#: dh:180
msgid ""
"Here is how to force use of perl's Module::Build build system, which can be "
"necessary if debhelper wrongly detects that the package uses MakeMaker."
msgstr ""

#. type: verbatim
#: dh:184
#, no-wrap
msgid ""
"\t#!/usr/bin/make -f\n"
"\t%:\n"
"\t\tdh $@ --buildsystem=perl_build\n"
"\n"
msgstr ""

#. type: verbatim
#: dh:188
#, no-wrap
msgid ""
"To patch your package using quilt, you can tell dh to use quilt's dh\n"
"sequence addons like this:\n"
"\t\n"
msgstr ""

#. type: verbatim
#: dh:191
#, no-wrap
msgid ""
"\t#!/usr/bin/make -f\n"
"\t%:\n"
"\t\tdh $@ --with quilt\n"
"\n"
msgstr ""

#. type: textblock
#: dh:195
msgid ""
"Here is an example of overriding where the dh_auto_* commands find the "
"package's source, for a package where the source is located in a "
"subdirectory."
msgstr ""

#. type: verbatim
#: dh:199
#, no-wrap
msgid ""
"\t#!/usr/bin/make -f\n"
"\t%:\n"
"\t\tdh $@ --sourcedirectory=src\n"
"\n"
msgstr ""

#. type: textblock
#: dh:203
msgid ""
"And here is an example of how to tell the dh_auto_* commands to build in a "
"subdirectory, which will be removed on clean."
msgstr ""

#. type: verbatim
#: dh:206
#, no-wrap
msgid ""
"\t#!/usr/bin/make -f\n"
"\t%:\n"
"\t\tdh $@ --builddirectory=build\n"
"\n"
msgstr ""

#. type: textblock
#: dh:210
msgid ""
"Finally, here is a way to prevent dh from running several commands that you "
"don't want it to run, by defining empty override targets for each command."
msgstr ""

#. type: verbatim
#: dh:214
#, no-wrap
msgid ""
"\t#!/usr/bin/make -f\n"
"\t%:\n"
"\t\tdh $@\n"
"\t\n"
msgstr ""

#. type: verbatim
#: dh:218
#, no-wrap
msgid ""
"\t# Commands not to run:\n"
"\toverride_dh_auto_test override_dh_compress override_dh_fixperms:\n"
"\n"
msgstr ""

#. type: textblock
#: dh:680 dh_auto_build:49 dh_auto_clean:50 dh_auto_configure:55 dh_auto_install:87 dh_auto_test:60 dh_builddeb:93 dh_clean:140 dh_compress:204 dh_fixperms:124 dh_gconf:112 dh_gencontrol:84 dh_install:276 dh_installcatalogs:118 dh_installchangelogs:171 dh_installcron:79 dh_installdeb:110 dh_installdebconf:128 dh_installdirs:88 dh_installdocs:303 dh_installemacsen:126 dh_installexamples:108 dh_installifupdown:71 dh_installinfo:79 dh_installinit:322 dh_installlogcheck:68 dh_installlogrotate:52 dh_installman:255 dh_installmanpages:199 dh_installmime:97 dh_installmodules:126 dh_installpam:61 dh_installppp:67 dh_installudev:127 dh_installwm:110 dh_installxfonts:89 dh_link:228 dh_listpackages:31 dh_makeshlibs:239 dh_md5sums:91 dh_movefiles:172 dh_perl:147 dh_prep:62 dh_python:282 dh_strip:229 dh_suidregister:119 dh_testdir:46 dh_testroot:29 dh_testversion:77 dh_undocumented:30 dh_usrlocal:116
msgid "L<debhelper(7)>"
msgstr ""

#. type: textblock
#: dh:682 dh_auto_build:51 dh_auto_clean:52 dh_auto_configure:57 dh_auto_install:89 dh_auto_test:62 dh_bugfiles:128 dh_builddeb:95 dh_clean:142 dh_compress:206 dh_desktop:35 dh_fixperms:126 dh_gconf:114 dh_gencontrol:86 dh_icons:69 dh_install:278 dh_installchangelogs:173 dh_installcron:81 dh_installdeb:112 dh_installdebconf:130 dh_installdirs:90 dh_installdocs:305 dh_installemacsen:128 dh_installexamples:110 dh_installifupdown:73 dh_installinfo:81 dh_installinit:324 dh_installlogrotate:54 dh_installman:257 dh_installmanpages:201 dh_installmenu:93 dh_installmime:99 dh_installmodules:128 dh_installpam:63 dh_installppp:69 dh_installudev:129 dh_installwm:112 dh_installxfonts:91 dh_link:230 dh_lintian:61 dh_listpackages:33 dh_makeshlibs:241 dh_md5sums:93 dh_movefiles:174 dh_perl:149 dh_prep:64 dh_python:284 dh_scrollkeeper:32 dh_shlibdeps:175 dh_strip:231 dh_suidregister:121 dh_testdir:48 dh_testroot:31 dh_testversion:79 dh_undocumented:32 dh_usrlocal:118
msgid "This program is a part of debhelper."
msgstr ""

#. type: textblock
#: dh_auto_build:5
msgid "dh_auto_build - automatically builds a package"
msgstr ""

#. type: textblock
#: dh_auto_build:14
msgid ""
"B<dh_auto_build> [S<I<build system options>>] [S<I<debhelper options>>] "
"[S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_auto_build:18
msgid ""
"dh_auto_build is a debhelper program that tries to automatically build a "
"package. It does so by running the appropriate command for the build system "
"it detects the package uses. For example, if a Makefile is found, this is "
"done by running make (or MAKE, if the environment variable is set). If "
"there's a setup.py, or Build.PL, it is run to build the package."
msgstr ""

#. type: textblock
#: dh_auto_build:24
msgid ""
"This is intended to work for about 90% of packages. If it doesn't work, "
"you're encouraged to skip using dh_auto_build at all, and just run the build "
"process manually."
msgstr ""

#. type: textblock
#: dh_auto_build:30 dh_auto_clean:31 dh_auto_configure:33 dh_auto_install:45 dh_auto_test:32
msgid ""
"See L<debhelper(7)/BUILD SYSTEM OPTIONS> for a list of common build system "
"selection and control options."
msgstr ""

#. type: =item
#: dh_auto_build:35 dh_auto_clean:36 dh_auto_configure:38 dh_auto_install:56 dh_auto_test:37 dh_builddeb:35 dh_gencontrol:30 dh_installdebconf:69 dh_installinit:99 dh_makeshlibs:86 dh_shlibdeps:37
msgid "B<--> I<params>"
msgstr ""

#. type: textblock
#: dh_auto_build:37
msgid ""
"Pass \"params\" to the program that is run. These can be used to supplement "
"or override any standard parameters that dh_auto_build passes."
msgstr ""

#. type: textblock
#: dh_auto_clean:5
msgid "dh_auto_clean - automatically cleans up after a build"
msgstr ""

#. type: textblock
#: dh_auto_clean:14
msgid ""
"B<dh_auto_clean> [S<I<build system options>>] [S<I<debhelper options>>] "
"[S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_auto_clean:18
msgid ""
"dh_auto_clean is a debhelper program that tries to automatically clean up "
"after a package build. It does so by running the appropriate command for the "
"build system it detects the package uses. For example, if there's a Makefile "
"and it contains a \"distclean\", \"realclean\", or \"clean\" target, then "
"this is done by running make (or MAKE, if the environment variable is "
"set). If there is a setup.py or Build.PL, it is run to clean the package."
msgstr ""

#. type: textblock
#: dh_auto_clean:25
msgid ""
"This is intended to work for about 90% of packages. If it doesn't work, or "
"tries to use the wrong clean target, you're encouraged to skip using "
"dh_auto_clean at all, and just run make clean manually."
msgstr ""

#. type: textblock
#: dh_auto_clean:38
msgid ""
"Pass \"params\" to the program that is run. These can be used to supplement "
"or override the any standard parameters that dh_auto_clean passes."
msgstr ""

#. type: textblock
#: dh_auto_configure:5
msgid "dh_auto_configure - automatically configure a package prior to building"
msgstr ""

#. type: textblock
#: dh_auto_configure:14
msgid ""
"B<dh_auto_configure> [S<I<build system options>>] [S<I<debhelper options>>] "
"[S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_auto_configure:18
msgid ""
"dh_auto_configure is a debhelper program that tries to automatically "
"configure a package prior to building. It does so by running the appropriate "
"command for the build system it detects the package uses.  For example, it "
"looks for and runs a ./configure script, Makefile.PL, Build.PL, or cmake. A "
"standard set of parameters is determined and passed to the program that is "
"run. Some build systems, such as make, do not need a configure step; for "
"these dh_auto_configure will exit without doing anything."
msgstr ""

#. type: textblock
#: dh_auto_configure:27
msgid ""
"This is intended to work for about 90% of packages. If it doesn't work, "
"you're encouraged to skip using dh_auto_configure at all, and just run "
"./configure or its equivalent manually."
msgstr ""

#. type: textblock
#: dh_auto_configure:40
msgid ""
"Pass \"params\" to the program that is run, after the standard parameters "
"that dh_auto_configure passes. This can be used to supplement or override "
"those parameters. For example:"
msgstr ""

#. type: verbatim
#: dh_auto_configure:44
#, no-wrap
msgid ""
"  dh_auto_configure -- --with-foo --enable-bar\n"
"\n"
msgstr ""

#. type: textblock
#: dh_auto_install:5
msgid "dh_auto_install - automatically runs make install or similar"
msgstr ""

#. type: textblock
#: dh_auto_install:17
msgid ""
"B<dh_auto_install> [S<I<build system options>>] [S<I<debhelper options>>] "
"[S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_auto_install:21
msgid ""
"dh_auto_install is a debhelper program that tries to automatically install "
"built files. It does so by running the appropriate command for the build "
"system it detects the package uses. For example, if there's a Makefile and "
"it contains a \"install\" target, then this is done by running make (or "
"MAKE, if the environment variable is set). If there is a setup.py or "
"Build.PL, it is used. Note that the Ant build system does not support "
"installation, so dh_auto_install will not install files built using Ant."
msgstr ""

#. type: textblock
#: dh_auto_install:29
msgid ""
"Unless --destdir option is specified, the files are installed into "
"debian/<package>/ if there is only one binary package. In the multiple "
"binary package case, the files are instead installed into debian/tmp/, and "
"should be moved from there to the appropriate package build directory using "
"L<dh_install(1)>."
msgstr ""

#. type: textblock
#: dh_auto_install:35
msgid ""
"DESTDIR is used to tell make where to install the files.  If the Makefile "
"was generated by MakeMaker from a Makefile.PL, it will automatically set "
"PREFIX=/usr too, since such Makefiles need that."
msgstr ""

#. type: textblock
#: dh_auto_install:39
msgid ""
"This is intended to work for about 90% of packages. If it doesn't work, or "
"tries to use the wrong install target, you're encouraged to skip using "
"dh_auto_install at all, and just run make install manually."
msgstr ""

#. type: =item
#: dh_auto_install:50 dh_builddeb:25
msgid "B<--destdir=>I<directory>"
msgstr ""

#. type: textblock
#: dh_auto_install:52
msgid ""
"Install files into the specified I<directory>. If this option is not "
"specified, destination directory is determined automatically as described in "
"the L</DESCRIPTION> section."
msgstr ""

#. type: textblock
#: dh_auto_install:58
msgid ""
"Pass \"params\" to the program that is run. These can be used to supplement "
"or override the any standard parameters that dh_auto_install passes."
msgstr ""

#. type: textblock
#: dh_auto_test:5
msgid "dh_auto_test - automatically runs a package's test suites"
msgstr ""

#. type: textblock
#: dh_auto_test:14
msgid ""
"B<dh_auto_test> [S<I<build system options>>] [S<I<debhelper options>>] "
"[S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_auto_test:18
msgid ""
"dh_auto_test is a debhelper program that tries to automatically run a "
"package's test suite. It does so by running the appropriate command for the "
"build system it detects the package uses. For example, if there's a Makefile "
"and it contains a \"test\" or \"check\" target, then this is done by running "
"make (or MAKE, if the environment variable is set). If the test suite fails, "
"the command will exit nonzero. If there's no test suite, it will exit zero "
"without doing anything."
msgstr ""

#. type: textblock
#: dh_auto_test:26
msgid ""
"This is intended to work for about 90% of packages with a test suite. If it "
"doesn't work, you're encouraged to skip using dh_auto_test at all, and just "
"run the test suite manually."
msgstr ""

#. type: textblock
#: dh_auto_test:39
msgid ""
"Pass \"params\" to the program that is run. These can be used to supplement "
"or override the any standard parameters that dh_auto_test passes."
msgstr ""

#. type: textblock
#: dh_auto_test:46
msgid ""
"If the DEB_BUILD_OPTIONS environment variable contains \"nocheck\", no tests "
"will be performed."
msgstr ""

#. type: textblock
#: dh_bugfiles:5
msgid ""
"dh_bugfiles - install bug reporting customization files into package build "
"directories"
msgstr ""

#. type: textblock
#: dh_bugfiles:14
msgid "B<dh_bugfiles> [B<-A>] [S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_bugfiles:18
msgid ""
"dh_bugfiles is a debhelper program that is responsible for installing bug "
"reporting customization files (bug scripts and/or bug control files and/or "
"presubj files) into package build directories."
msgstr ""

#. type: =head1
#: dh_bugfiles:22 dh_clean:31 dh_compress:31 dh_gconf:27 dh_install:38 dh_installcatalogs:35 dh_installchangelogs:32 dh_installcron:21 dh_installdeb:22 dh_installdebconf:34 dh_installdirs:21 dh_installdocs:21 dh_installemacsen:27 dh_installexamples:22 dh_installifupdown:22 dh_installinfo:21 dh_installinit:27 dh_installlogcheck:21 dh_installman:50 dh_installmenu:25 dh_installmime:25 dh_installmodules:29 dh_installpam:21 dh_installppp:21 dh_installudev:25 dh_installwm:24 dh_link:39 dh_lintian:21 dh_makeshlibs:24 dh_movefiles:26
msgid "FILES"
msgstr ""

#. type: =item
#: dh_bugfiles:26
msgid "debian/I<package>.bug-script"
msgstr ""

#. type: textblock
#: dh_bugfiles:28
msgid ""
"This is the script to be run by the bug reporting program for generating a "
"bug report template. This file is installed as F<usr/share/bug/package> in "
"the package build directory if no other types of bug reporting customization "
"files are going to be installed for the package in question. Otherwise, this "
"file is installed as F<usr/share/bug/package/script>. Finally, the installed "
"script is given execute permissions."
msgstr ""

#. type: =item
#: dh_bugfiles:35
msgid "debian/I<package>.bug-control"
msgstr ""

#. type: textblock
#: dh_bugfiles:37
msgid ""
"It is the bug control file containing some directions for the bug reporting "
"tool. This file is installed as F<usr/share/bug/package/control> in the "
"package build directory."
msgstr ""

#. type: =item
#: dh_bugfiles:41
msgid "debian/I<package>.bug-presubj"
msgstr ""

#. type: textblock
#: dh_bugfiles:43
msgid ""
"The contents of this file are displayed to the user by the bug reporting "
"tool before allowing the user to write a bug report on the package to the "
"Debian Bug Tracking System. This file is installed as "
"F<usr/share/bug/package/presubj> in the package build directory."
msgstr ""

#. type: textblock
#: dh_bugfiles:56
msgid ""
"Install debian/bug-* files to ALL packages acted on when respective "
"debian/package.bug-* files do not exist. Normally, debian/bug-* will be "
"installed to the first package only."
msgstr ""

#. type: textblock
#: dh_bugfiles:124
msgid "F</usr/share/doc/reportbug/README.developers.gz>"
msgstr ""

#. type: textblock
#: dh_bugfiles:126 dh_lintian:59
msgid "L<debhelper(1)>"
msgstr ""

#. type: textblock
#: dh_bugfiles:132
msgid "Modestas Vainius <modestas@vainius.eu>"
msgstr ""

#. type: textblock
#: dh_builddeb:5
msgid "dh_builddeb - build debian binary packages"
msgstr ""

#. type: textblock
#: dh_builddeb:14
msgid ""
"B<dh_builddeb> [S<I<debhelper options>>] [B<--destdir=>I<directory>] "
"[B<--filename=>I<name>] [S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_builddeb:18
msgid ""
"dh_builddeb simply calls L<dpkg-deb(1)> to build a debian package or "
"packages."
msgstr ""

#. type: textblock
#: dh_builddeb:27
msgid ""
"Use this if you want the generated .deb files to be put in a directory other "
"than the default of \"..\""
msgstr ""

#. type: =item
#: dh_builddeb:30
msgid "B<--filename=>I<name>"
msgstr ""

#. type: textblock
#: dh_builddeb:32
msgid ""
"Use this if you want to force the generated .deb file to have a particular "
"file name. Does not work well if more than one .deb is generated!"
msgstr ""

#. type: textblock
#: dh_builddeb:37
msgid "Pass I<params> to L<dpkg-deb(1)> when it is used to build the package."
msgstr ""

#. type: =item
#: dh_builddeb:40
msgid "B<-u>I<params>"
msgstr ""

#. type: textblock
#: dh_builddeb:42 dh_gencontrol:36 dh_shlibdeps:43
msgid ""
"This is another way to pass I<params> to L<dpkg-deb(1)>.  It is deprecated; "
"use B<--> instead."
msgstr ""

#. type: textblock
#: dh_clean:5
msgid "dh_clean - clean up package build directories"
msgstr ""

#. type: textblock
#: dh_clean:14
msgid ""
"B<dh_clean> [S<I<debhelper options>>] [B<-k>] [B<-d>] [B<-X>I<item>] "
"[S<I<file ...>>]"
msgstr ""

#. type: verbatim
#: dh_clean:18
#, no-wrap
msgid ""
"dh_clean is a debhelper program that is responsible for cleaning up after "
"a\n"
"package is built. It removes the package build directories, and removes "
"some\n"
"other files including debian/files, and any detritus left behind by other\n"
"debhelper commands. It also removes common files that should not appear in "
"a\n"
"debian diff:\n"
"  #*# *~ DEADJOE *.orig *.rej *.SUMS TAGS .deps/* *.P *-stamp\n"
"\n"
msgstr ""

#. type: textblock
#: dh_clean:25
msgid ""
"It does not run \"make clean\" to clean up after the build process. Use "
"L<dh_auto_clean(1)> to do things like that."
msgstr ""

#. type: textblock
#: dh_clean:28
msgid ""
"dh_clean (or \"dh clean\") should be the last debhelper command run in the "
"clean target in debian/rules."
msgstr ""

#. type: =item
#: dh_clean:35
msgid "debian/clean"
msgstr ""

#. type: textblock
#: dh_clean:37
msgid "Can list other files to be removed."
msgstr ""

#. type: =item
#: dh_clean:45 dh_installchangelogs:60
msgid "B<-k>, B<--keep>"
msgstr ""

#. type: textblock
#: dh_clean:47
msgid "This is deprecated, use L<dh_prep(1)> instead."
msgstr ""

#. type: =item
#: dh_clean:49
msgid "B<-d>, B<--dirs-only>"
msgstr ""

#. type: textblock
#: dh_clean:51
msgid ""
"Only clean the package build directories, do not clean up any other files at "
"all."
msgstr ""

#. type: =item
#: dh_clean:54 dh_prep:30
msgid "B<-X>I<item> B<--exclude=>I<item>"
msgstr ""

#. type: textblock
#: dh_clean:56 dh_prep:32
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"deleted, even if they would normally be deleted. You may use this option "
"multiple times to build up a list of things to exclude."
msgstr ""

#. type: =item
#: dh_clean:60 dh_compress:63 dh_installdocs:92 dh_installexamples:46 dh_installinfo:40 dh_installmanpages:44 dh_movefiles:55 dh_testdir:27
msgid "I<file ...>"
msgstr ""

#. type: textblock
#: dh_clean:62
msgid "Delete these files too."
msgstr ""

#. type: textblock
#: dh_compress:5
msgid "dh_compress - compress files and fix symlinks in package build directories"
msgstr ""

#. type: textblock
#: dh_compress:15
msgid ""
"B<dh_compress> [S<I<debhelper options>>] [B<-X>I<item>] [B<-A>] [S<I<file "
"...>>]"
msgstr ""

#. type: textblock
#: dh_compress:19
msgid ""
"dh_compress is a debhelper program that is responsible for compressing the "
"files in package build directories, and makes sure that any symlinks that "
"pointed to the files before they were compressed are updated to point to the "
"new files."
msgstr ""

#. type: textblock
#: dh_compress:24
msgid ""
"By default, dh_compress compresses files that debian policy mandates should "
"be compressed, namely all files in usr/share/info, usr/share/man, files in "
"usr/share/doc that are larger than 4k in size, (except the copyright file, "
".html and .css files, image files, and files that appear to be already "
"compressed based on their extensions), and all changelog files. Plus PCF "
"fonts underneath usr/share/fonts/X11/"
msgstr ""

#. type: =item
#: dh_compress:35
msgid "debian/I<package>.compress"
msgstr ""

#. type: textblock
#: dh_compress:37
msgid ""
"If this file exists, the default files are not compressed. Instead, the file "
"is ran as a shell script, and all filenames that the shell script outputs "
"will be compressed. The shell script will be run from inside the package "
"build directory. Note though that using -X is a much better idea in general; "
"you should only use a debian/package.compress file if you really need to."
msgstr ""

#. type: textblock
#: dh_compress:52
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"compressed. For example, -X.tiff will exclude tiff files from compression.  "
"You may use this option multiple times to build up a list of things to "
"exclude. You can accomplish the same thing by using a debian/compress file, "
"but this is easier."
msgstr ""

#. type: textblock
#: dh_compress:60
msgid ""
"Compress all files specified by command line parameters in ALL packages "
"acted on."
msgstr ""

#. type: textblock
#: dh_compress:65
msgid "Add these files to the list of files to compress."
msgstr ""

#. type: =head1
#: dh_compress:69 dh_perl:61 dh_python:66 dh_strip:74 dh_usrlocal:55
msgid "CONFORMS TO"
msgstr ""

#. type: textblock
#: dh_compress:71
msgid "Debian policy, version 3.0"
msgstr ""

#. type: textblock
#: dh_desktop:5
msgid "dh_desktop - deprecated no-op"
msgstr ""

#. type: textblock
#: dh_desktop:14
msgid "B<dh_desktop> [S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_desktop:18
msgid ""
"dh_desktop was a debhelper program that registers .desktop files.  However, "
"it no longer does anything, and is now deprecated."
msgstr ""

#. type: textblock
#: dh_desktop:21
msgid ""
"If a package ships desktop files, they just need to be installed in the "
"correct location (/usr/share/applications) and they will be registered by "
"the appropriate tools for the corresponding desktop environments."
msgstr ""

#. type: textblock
#: dh_desktop:33 dh_icons:67 dh_scrollkeeper:30
msgid "L<debhelper>"
msgstr ""

#. type: textblock
#: dh_desktop:39 dh_scrollkeeper:36
msgid "Ross Burton <ross@burtonini.com>"
msgstr ""

#. type: textblock
#: dh_fixperms:5
msgid "dh_fixperms - fix permissions of files in package build directories"
msgstr ""

#. type: textblock
#: dh_fixperms:14
msgid "B<dh_fixperms> [S<I<debhelper options>>] [B<-X>I<item>]"
msgstr ""

#. type: textblock
#: dh_fixperms:18
msgid ""
"dh_fixperms is a debhelper program that is responsible for setting the "
"permissions of files and directories in package build directories to a sane "
"state -- a state that complies with Debian policy."
msgstr ""

#. type: textblock
#: dh_fixperms:22
msgid ""
"dh_fixperms makes all files in usr/share/doc in the package build directory "
"(excluding files in the examples/ directory) be mode 644. It also changes "
"the permissions of all man pages to mode 644. It makes all files be owned by "
"root, and it removes group and other write permission from all files. It "
"removes execute permissions from any libraries, headers, perl modules, or "
"desktop files that have it set. It makes all files in the standard bin and "
"sbin directories, usr/games/ and etc/init.d executable (since v4). Finally, "
"it removes the setuid and setgid bits from all files in the package."
msgstr ""

#. type: =item
#: dh_fixperms:35
msgid "B<-X>I<item>, B<--exclude> I<item>"
msgstr ""

#. type: textblock
#: dh_fixperms:37
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from having "
"their permissions changed. You may use this option multiple times to build "
"up a list of things to exclude."
msgstr ""

#. type: textblock
#: dh_gconf:5
msgid "dh_gconf - generate GConf schema registration scripts"
msgstr ""

#. type: textblock
#: dh_gconf:14
msgid "B<dh_gconf> [S<I<debhelper options>>] [B<--priority=<number>>]"
msgstr ""

#. type: textblock
#: dh_gconf:18
msgid ""
"dh_gconf is a debhelper program that is responsible for registering GConf "
"schemas."
msgstr ""

#. type: textblock
#: dh_gconf:21
msgid ""
"It automatically generates the postinst and prerm fragments needed to "
"register and unregister the schemas in usr/share/gconf/schemas, using "
"gconf-schemas."
msgstr ""

#. type: textblock
#: dh_gconf:25
msgid "An appropriate dependency on gconf2 will be generated in ${misc:Depends}."
msgstr ""

#. type: =item
#: dh_gconf:31
msgid "debian/I<package>.gconf-defaults"
msgstr ""

#. type: textblock
#: dh_gconf:33
msgid ""
"Installed into usr/share/gconf/defaults/10_package in the package build "
"directory, with \"I<package>\" replaced by the package name. Some postinst "
"and postrm fragments will be generated to run update-gconf-defaults."
msgstr ""

#. type: =item
#: dh_gconf:37
msgid "debian/I<package>.gconf-mandatory"
msgstr ""

#. type: textblock
#: dh_gconf:39
msgid ""
"Installed into usr/share/gconf/mandatory/10_package in the package build "
"directory, with \"I<package>\" replaced by the package name, and similar "
"postinst and postrm fragments will be generated."
msgstr ""

#. type: =item
#: dh_gconf:49
msgid "B<--priority> I<priority>"
msgstr ""

#. type: textblock
#: dh_gconf:51
msgid ""
"Use I<priority> (which should be a 2-digit number) as the defaults priority "
"instead of 10. Higher values than ten can be used by derived distributions "
"(20), CDD distributions (50), or site-specific packages (90)."
msgstr ""

#. type: textblock
#: dh_gconf:118
msgid "Ross Burton <ross@burtonini.com> Josselin Mouette <joss@debian.org>"
msgstr ""

#. type: textblock
#: dh_gencontrol:5
msgid "dh_gencontrol - generate and install control file"
msgstr ""

#. type: textblock
#: dh_gencontrol:14
msgid "B<dh_gencontrol> [S<I<debhelper options>>] [S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_gencontrol:18
msgid ""
"dh_gencontrol is a debhelper program that is responsible for generating "
"control files, and installing them into the DEBIAN directory with the proper "
"permissions."
msgstr ""

#. type: textblock
#: dh_gencontrol:22
msgid ""
"This program is merely a wrapper around L<dpkg-gencontrol(1)>, which calls "
"it once for each package being acted on, and passes in some additional "
"useful flags."
msgstr ""

#. type: textblock
#: dh_gencontrol:32
msgid "Pass \"params\" to L<dpkg-gencontrol(1)>."
msgstr ""

#. type: =item
#: dh_gencontrol:34
msgid "B<-u>I<params>, B<--dpkg-gencontrol-params>=I<params>"
msgstr ""

#. type: textblock
#: dh_icons:5
msgid "dh_icons - Update Freedesktop icon caches"
msgstr ""

#. type: textblock
#: dh_icons:15
msgid "B<dh_icons> [S<I<debhelper options>>] [B<-n>]"
msgstr ""

#. type: textblock
#: dh_icons:19
msgid ""
"dh_icons is a debhelper program that updates Freedesktop icon caches when "
"needed, using the update-icon-caches program provided by GTK+2.12.  "
"Currently this program does not handle installation of the files, though it "
"may do so at a later date. It takes care of adding maintainer script "
"fragments to call F<update-icon-caches>."
msgstr ""

#. type: =item
#: dh_icons:29 dh_installcatalogs:53 dh_installdebconf:65 dh_installemacsen:52 dh_installinit:52 dh_installmenu:45 dh_installmime:45 dh_installmodules:48 dh_installudev:49 dh_installwm:44 dh_makeshlibs:72 dh_python:60 dh_usrlocal:43
msgid "B<-n>, B<--noscripts>"
msgstr ""

#. type: textblock
#: dh_icons:31
msgid "Do not modify maintainer scripts."
msgstr ""

#. type: textblock
#: dh_icons:73
msgid ""
"Ross Burton <ross@burtonini.com> Jordi Mallach <jordi@debian.org> Josselin "
"Mouette <joss@debian.org>"
msgstr ""

#. type: textblock
#: dh_install:5
msgid "dh_install - install files into package build directories"
msgstr ""

#. type: textblock
#: dh_install:15
msgid ""
"B<dh_install> [B<-X>I<item>] [B<--autodest>] [B<--sourcedir=>I<dir>] "
"[S<I<debhelper options>>] [S<I<file [...] dest>>]"
msgstr ""

#. type: textblock
#: dh_install:19
msgid ""
"dh_install is a debhelper program that handles installing files into package "
"build directories. There are many dh_install* commands that handle "
"installing specific types of files such as documentation, examples, man "
"pages, and so on, and they should be used when possible as they often have "
"extra intelligence for those particular tasks. dh_install, then, is useful "
"for installing everything else, for which no particular intelligence is "
"needed. It is a replacement for the old dh_movefiles command."
msgstr ""

#. type: textblock
#: dh_install:27
msgid ""
"This program may be used in one of two ways. If you just have a file or two "
"that the upstream Makefile does not install for you, you can run dh_install "
"on them to move them into place. On the other hand, maybe you have a large "
"package that builds multiple binary packages. You can use the upstream "
"Makefile to install it all into debian/tmp, and then use dh_install to copy "
"directories and files from there into the proper package build directories."
msgstr ""

#. type: textblock
#: dh_install:34
msgid ""
"From debhelper compatibility level 7 on, dh_install will fall back to "
"looking in debian/tmp for files, if it doesn't find them in the current "
"directory (or whereever you've told it to look using --sourcedir)."
msgstr ""

#. type: =item
#: dh_install:42
msgid "debian/I<package>.install"
msgstr ""

#. type: textblock
#: dh_install:44
msgid ""
"List the files to install into each package and the directory they should be "
"installed to. The format is a set of lines, where each line lists a file or "
"files to install, and at the end of the line tells the directory it should "
"be installed in. The name of the files (or directories) to install should be "
"given relative to the current directory, while the installation directory is "
"given relative to the package build directory. You may use wildcards in the "
"names of the files to install (in v3 mode and above)."
msgstr ""

#. type: =item
#: dh_install:58
msgid "B<--list-missing>"
msgstr ""

#. type: textblock
#: dh_install:60
msgid ""
"This option makes dh_install keep track of the files it installs, and then "
"at the end, compare that list with the files in the source directory. If any "
"of the files (and symlinks) in the source directory were not installed to "
"somewhere, it will warn on stderr about that."
msgstr ""

#. type: textblock
#: dh_install:65
msgid ""
"This may be useful if you have a large package and want to make sure that "
"you don't miss installing newly added files in new upstream releases."
msgstr ""

#. type: textblock
#: dh_install:68
msgid ""
"Note that files that are excluded from being moved via the -X option are not "
"warned about."
msgstr ""

#. type: =item
#: dh_install:71
msgid "B<--fail-missing>"
msgstr ""

#. type: textblock
#: dh_install:73
msgid ""
"This option is like --list-missing, except if a file was missed, it will not "
"only list the missing files, but also fail with a nonzero exit code."
msgstr ""

#. type: =item
#: dh_install:76 dh_installchangelogs:68 dh_installdocs:69 dh_installexamples:41 dh_link:60 dh_movefiles:50
msgid "B<-Xitem>, B<--exclude=item>"
msgstr ""

#. type: textblock
#: dh_install:78 dh_installexamples:43 dh_movefiles:52
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"installed."
msgstr ""

#. type: =item
#: dh_install:81
msgid "B<--sourcedir=dir>"
msgstr ""

#. type: textblock
#: dh_install:83
msgid "Look in the specified directory for files to be installed."
msgstr ""

#. type: textblock
#: dh_install:85
msgid ""
"Note that this is not the same as the --sourcedirectory option used by the "
"dh_auto_* commands. You rarely need to use this option, since dh_install "
"automatically looks for files in debian/tmp in debhelper compatibility level "
"7 and above."
msgstr ""

#. type: =item
#: dh_install:90
msgid "B<--autodest>"
msgstr ""

#. type: textblock
#: dh_install:92
msgid ""
"Guess as the destination directory to install things to. If this is "
"specified, you should not list destination directories in "
"debian/package.install files or on the command line. Instead, dh_install "
"will guess as follows:"
msgstr ""

#. type: textblock
#: dh_install:97
msgid ""
"Strip off debian/tmp (or the sourcedir if one is given) from the front of "
"the filename, if it is present, and install into the dirname of the "
"filename. So if the filename is debian/tmp/usr/bin, then that directory will "
"be copied to debian/package/usr/. If the filename is debian/tmp/etc/passwd, "
"it will be copied to debian/package/etc/."
msgstr ""

#. type: textblock
#: dh_install:103
msgid ""
"Note that if you list exactly one filename or wildcard-pattern on a line by "
"itself in a debian/package.install file, with no explicit destination, then "
"dh_install will automatically guess the destination even if this flag is not "
"set."
msgstr ""

#. type: =item
#: dh_install:108
msgid "I<file [...] dest>"
msgstr ""

#. type: textblock
#: dh_install:110
msgid ""
"Lists files (or directories) to install and where to install them to.  The "
"files will be installed into the first package dh_install acts on."
msgstr ""

#. type: =head1
#: dh_install:247
msgid "EXAMPLE"
msgstr ""

#. type: textblock
#: dh_install:249
msgid ""
"Suppose your package's upstream Makefile installs a binary, a man page, and "
"a library into appropriate subdirectories of debian/tmp. You want to put the "
"library into package libfoo, and the rest into package foo. Your rules file "
"will run \"dh_install --sourcedir=debian/tmp\". Make debian/foo.install "
"contain:"
msgstr ""

#. type: verbatim
#: dh_install:255
#, no-wrap
msgid ""
"  usr/bin\n"
"  usr/share/man/man1\n"
"\n"
msgstr ""

#. type: textblock
#: dh_install:258
msgid "While debian/libfoo.install contains:"
msgstr ""

#. type: verbatim
#: dh_install:260
#, no-wrap
msgid ""
"  usr/lib/libfoo*.so.*\n"
"\n"
msgstr ""

#. type: textblock
#: dh_install:262
msgid ""
"If you want a libfoo-dev package too, debian/libfoo-dev.install might "
"contain:"
msgstr ""

#. type: verbatim
#: dh_install:264
#, no-wrap
msgid ""
"  usr/include\n"
"  usr/lib/libfoo*.so\n"
"  usr/share/man/man3\n"
"\n"
msgstr ""

#. type: =head1
#: dh_install:268
msgid "LIMITATIONS"
msgstr ""

#. type: verbatim
#: dh_install:270
#, no-wrap
msgid ""
"dh_install cannot rename files or directories, it can only install them\n"
"with the names they already have into wherever you want in the package\n"
"build tree.\n"
"  \n"
msgstr ""

#. type: textblock
#: dh_installcatalogs:5
msgid "dh_installcatalogs - install and register SGML Catalogs"
msgstr ""

#. type: textblock
#: dh_installcatalogs:16
msgid "B<dh_installcatalogs> [S<I<debhelper options>>] [B<-n>]"
msgstr ""

#. type: textblock
#: dh_installcatalogs:20
msgid ""
"dh_installcatalogs is a debhelper program that installs and registers SGML "
"catalogs. It complies with the Debian XML/SGML policy."
msgstr ""

#. type: textblock
#: dh_installcatalogs:23
msgid ""
"Catalogs will be registered in a supercatalog, in "
"F</etc/sgml/I<package>.cat>."
msgstr ""

#. type: textblock
#: dh_installcatalogs:26
msgid ""
"This command automatically adds maintainer script snippets for registering "
"and unregistering the catalogs and supercatalogs (unless B<-n> is "
"used). These snippets are inserted into the maintainer scripts by "
"dh_installdeb; see L<dh_installdeb(1)> for an explanation of Debhelper "
"maintainer script snippets."
msgstr ""

#. type: textblock
#: dh_installcatalogs:32
msgid ""
"A dependency on B<sgml-base> will be added to C<${misc:Depends}>, so be sure "
"your package uses that variable in F<debian/control>."
msgstr ""

#. type: =item
#: dh_installcatalogs:39
msgid "debian/I<package>.sgmlcatalogs"
msgstr ""

#. type: textblock
#: dh_installcatalogs:41
msgid ""
"Lists the catalogs to be installed per package.  Each line in that file "
"should be of the form C<source dest>, where C<source> indicates where the "
"catalog resides in the source tree, and C<dest> indicates the destination "
"location for the catalog under the package build area.  C<dest> should start "
"with F</usr/share/sgml/>."
msgstr ""

#. type: textblock
#: dh_installcatalogs:55
msgid "Do not modify F<postinst>/F<postrm>/F<prerm> scripts."
msgstr ""

#. type: textblock
#: dh_installcatalogs:61 dh_installdocs:116 dh_installemacsen:69 dh_installinit:143 dh_installmime:53 dh_installmodules:62 dh_installudev:57 dh_installwm:56 dh_usrlocal:51
msgid ""
"Note that this command is not idempotent. L<dh_prep(1)> should be called "
"between invocations of this command. Otherwise, it may cause multiple "
"instances of the same text to be added to maintainer scripts."
msgstr ""

#. type: textblock
#: dh_installcatalogs:120
msgid "F</usr/share/doc/sgml-base-doc/>"
msgstr ""

#. type: textblock
#: dh_installcatalogs:124
msgid "Adam Di Carlo <aph@debian.org>"
msgstr ""

#. type: textblock
#: dh_installchangelogs:5
msgid "dh_installchangelogs - install changelogs into package build directories"
msgstr ""

#. type: textblock
#: dh_installchangelogs:14
msgid ""
"B<dh_installchangelogs> [S<I<debhelper options>>] [B<-k>] [B<-X>I<item>] "
"[I<upstream>]"
msgstr ""

#. type: textblock
#: dh_installchangelogs:18
msgid ""
"dh_installchangelogs is a debhelper program that is responsible for "
"installing changelogs into package build directories."
msgstr ""

#. type: textblock
#: dh_installchangelogs:21
msgid ""
"An upstream changelog file may be specified as an option. If none is "
"specified, a few common filenames are tried. (In compatibility level 7 and "
"above.)"
msgstr ""

#. type: textblock
#: dh_installchangelogs:25
msgid ""
"If there is an upstream changelog file, it will be be installed as "
"usr/share/doc/package/changelog in the package build directory. If the "
"changelog is a html file (determined by file extension), it will be "
"installed as usr/share/doc/package/changelog.html instead, and will be "
"converted to plain text with html2text to generate "
"usr/share/doc/package/changelog."
msgstr ""

#. type: =item
#: dh_installchangelogs:36
msgid "debian/changelog"
msgstr ""

#. type: =item
#: dh_installchangelogs:38
msgid "debian/NEWS"
msgstr ""

#. type: =item
#: dh_installchangelogs:40
msgid "debian/I<package>.changelog"
msgstr ""

#. type: =item
#: dh_installchangelogs:42
msgid "debian/I<package>.NEWS"
msgstr ""

#. type: textblock
#: dh_installchangelogs:44
msgid ""
"Automatically installed into usr/share/doc/I<package>/ in the package build "
"directory."
msgstr ""

#. type: textblock
#: dh_installchangelogs:47
msgid ""
"Use the package specific name if I<package> needs a different NEWS or "
"changelog file."
msgstr ""

#. type: textblock
#: dh_installchangelogs:50
msgid ""
"The changelog file is installed with a name of changelog for native "
"packages, and changelog.Debian for non-native packages.  The NEWS file is "
"always installed with a name of NEWS.Debian."
msgstr ""

#. type: textblock
#: dh_installchangelogs:62
msgid ""
"Keep the original name of the upstream changelog. This will be accomplished "
"by installing the upstream changelog as \"changelog\", and making a symlink "
"from that to the original name of the changelog file. This can be useful if "
"the upstream changelog has an unusual name, or if other documentation in the "
"package refers to the changelog file."
msgstr ""

#. type: textblock
#: dh_installchangelogs:70
msgid ""
"Exclude upstream changelog files that contain \"item\" anywhere in their "
"filename from being installed."
msgstr ""

#. type: =item
#: dh_installchangelogs:73
msgid "I<upstream>"
msgstr ""

#. type: textblock
#: dh_installchangelogs:75
msgid "Install this file as the upstream changelog."
msgstr ""

#. type: textblock
#: dh_installcron:5
msgid "dh_installcron - install cron scripts into etc/cron.*"
msgstr ""

#. type: textblock
#: dh_installcron:14
msgid "B<dh_installcron> [S<B<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

#. type: textblock
#: dh_installcron:18
msgid ""
"dh_installcron is a debhelper program that is responsible for installing "
"cron scripts."
msgstr ""

#. type: =item
#: dh_installcron:25
msgid "debian/I<package>.cron.daily"
msgstr ""

#. type: =item
#: dh_installcron:27
msgid "debian/I<package>.cron.weekly"
msgstr ""

#. type: =item
#: dh_installcron:29
msgid "debian/I<package>.cron.monthly"
msgstr ""

#. type: =item
#: dh_installcron:31
msgid "debian/I<package>.cron.hourly"
msgstr ""

#. type: =item
#: dh_installcron:33
msgid "debian/I<package>.cron.d"
msgstr ""

#. type: textblock
#: dh_installcron:35
msgid ""
"Installed into the appropriate etc/cron.*/ directory in the package build "
"directory."
msgstr ""

#. type: =item
#: dh_installcron:44 dh_installifupdown:43 dh_installinit:104 dh_installlogrotate:26 dh_installmodules:52 dh_installpam:35 dh_installppp:39 dh_installudev:39
msgid "B<--name=>I<name>"
msgstr ""

#. type: textblock
#: dh_installcron:46
msgid ""
"Look for files named debian/package.name.cron.* and install them as "
"etc/cron.*/name, instead of using the usual files and installing them as the "
"package name."
msgstr ""

#. type: textblock
#: dh_installdeb:5
msgid "dh_installdeb - install files into the DEBIAN directory"
msgstr ""

#. type: textblock
#: dh_installdeb:14
msgid "B<dh_installdeb> [S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_installdeb:18
msgid ""
"dh_installdeb is a debhelper program that is responsible for installing "
"files into the DEBIAN directories in package build directories with the "
"correct permissions."
msgstr ""

#. type: =item
#: dh_installdeb:26
msgid "I<package>.postinst"
msgstr ""

#. type: =item
#: dh_installdeb:28
msgid "I<package>.preinst"
msgstr ""

#. type: =item
#: dh_installdeb:30
msgid "I<package>.postrm"
msgstr ""

#. type: =item
#: dh_installdeb:32
msgid "I<package>.prerm"
msgstr ""

#. type: textblock
#: dh_installdeb:34
msgid "These maintainer scripts are installed into the DEBIAN directory."
msgstr ""

#. type: textblock
#: dh_installdeb:36
msgid ""
"Inside the scripts, the token B<#DEBHELPER#> is replaced with shell script "
"snippets generated by other debhelper commands."
msgstr ""

#. type: =item
#: dh_installdeb:39
msgid "I<package>.triggers"
msgstr ""

#. type: =item
#: dh_installdeb:41
msgid "I<package>.shlibs"
msgstr ""

#. type: textblock
#: dh_installdeb:43
msgid "These control files are installed into the DEBIAN directory."
msgstr ""

#. type: =item
#: dh_installdeb:45
msgid "I<package>.conffiles"
msgstr ""

#. type: textblock
#: dh_installdeb:47
msgid "This control file will be installed into the DEBIAN directory."
msgstr ""

#. type: textblock
#: dh_installdeb:49
msgid ""
"In V3 compatibility mode and higher, all files in the etc/ directory in a "
"package will automatically be flagged as conffiles by this program, so there "
"is no need to list them manually here."
msgstr ""

#. type: textblock
#: dh_installdebconf:5
msgid ""
"dh_installdebconf - install files used by debconf in package build "
"directories"
msgstr ""

#. type: textblock
#: dh_installdebconf:14
msgid "B<dh_installdebconf> [S<I<debhelper options>>] [B<-n>] [S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_installdebconf:18
msgid ""
"dh_installdebconf is a debhelper program that is responsible for installing "
"files used by debconf into package build directories."
msgstr ""

#. type: textblock
#: dh_installdebconf:21
msgid ""
"It also automatically generates the postrm commands needed to interface with "
"debconf. The commands are added to the maintainer scripts by "
"dh_installdeb. See L<dh_installdeb(1)> for an explanation of how that works."
msgstr ""

#. type: textblock
#: dh_installdebconf:26
msgid ""
"Note that if you use debconf, your package probably needs to depend on it "
"(it will be added to ${misc:Depends} by this program)."
msgstr ""

#. type: textblock
#: dh_installdebconf:29
msgid ""
"Note that for your config script to be called by dpkg, your postinst needs "
"to source debconf's confmodule. dh_installdebconf does not install this "
"statement into the postinst automatically as it it too hard to do it right."
msgstr ""

#. type: =item
#: dh_installdebconf:38
msgid "debian/I<package>.config"
msgstr ""

#. type: textblock
#: dh_installdebconf:40
msgid ""
"This is the debconf config script, and is installed into the DEBIAN "
"directory in the package build directory."
msgstr ""

#. type: textblock
#: dh_installdebconf:43
msgid ""
"Inside the script, the token B<#DEBHELPER#> is replaced with shell script "
"snippets generated by other debhelper commands."
msgstr ""

#. type: =item
#: dh_installdebconf:46
msgid "debian/I<package>.templates"
msgstr ""

#. type: textblock
#: dh_installdebconf:48
msgid ""
"This is the debconf templates file, and is installed into the DEBIAN "
"directory in the package build directory."
msgstr ""

#. type: =item
#: dh_installdebconf:51
msgid "debian/po/"
msgstr ""

#. type: textblock
#: dh_installdebconf:53
msgid ""
"If this directory is present, this program will automatically use "
"L<po2debconf(1)> to generate merged templates files that include the "
"translations from there."
msgstr ""

#. type: textblock
#: dh_installdebconf:57
msgid "For this to work, your package should build-depend on po-debconf."
msgstr ""

#. type: textblock
#: dh_installdebconf:67
msgid "Do not modify postrm script."
msgstr ""

#. type: textblock
#: dh_installdebconf:71
msgid "Pass the params to po2debconf."
msgstr ""

#. type: textblock
#: dh_installdirs:5
msgid "dh_installdirs - create subdirectories in package build directories"
msgstr ""

#. type: textblock
#: dh_installdirs:14
msgid "B<dh_installdirs> [S<I<debhelper options>>] [B<-A>] [S<I<dir ...>>]"
msgstr ""

#. type: textblock
#: dh_installdirs:18
msgid ""
"dh_installdirs is a debhelper program that is responsible for creating "
"subdirectories in package build directories."
msgstr ""

#. type: =item
#: dh_installdirs:25
msgid "debian/I<package>.dirs"
msgstr ""

#. type: textblock
#: dh_installdirs:27
msgid "Lists directories to be created in I<package>."
msgstr ""

#. type: textblock
#: dh_installdirs:37
msgid ""
"Create any directories specified by command line parameters in ALL packages "
"acted on, not just the first."
msgstr ""

#. type: =item
#: dh_installdirs:40
msgid "I<dir ...>"
msgstr ""

#. type: textblock
#: dh_installdirs:42
msgid ""
"Create these directories in the package build directory of the first package "
"acted on. (Or in all packages if -A is specified.)"
msgstr ""

#. type: textblock
#: dh_installdocs:5
msgid "dh_installdocs - install documentation into package build directories"
msgstr ""

#. type: textblock
#: dh_installdocs:14
msgid ""
"B<dh_installdocs> [S<I<debhelper options>>] [B<-A>] [B<-X>I<item>] [S<I<file "
"...>>]"
msgstr ""

#. type: textblock
#: dh_installdocs:18
msgid ""
"dh_installdocs is a debhelper program that is responsible for installing "
"documentation into usr/share/doc/package in package build directories."
msgstr ""

#. type: =item
#: dh_installdocs:25
msgid "debian/I<package>.docs"
msgstr ""

#. type: textblock
#: dh_installdocs:27
msgid "List documentaton files to be installed into I<package>."
msgstr ""

#. type: =item
#: dh_installdocs:29
msgid "debian/copyright"
msgstr ""

#. type: =item
#: dh_installdocs:31
msgid "debian/README.Debian"
msgstr ""

#. type: =item
#: dh_installdocs:33
msgid "debian/TODO"
msgstr ""

#. type: =item
#: dh_installdocs:35
msgid "debian/I<package>.copyright"
msgstr ""

#. type: =item
#: dh_installdocs:37
msgid "debian/I<package>.README.Debian"
msgstr ""

#. type: =item
#: dh_installdocs:39
msgid "debian/I<package>.TODO"
msgstr ""

#. type: textblock
#: dh_installdocs:41
msgid ""
"Each of these files is automatically installed if present. Use the package "
"specific name if I<package> needs a different version of the file."
msgstr ""

#. type: textblock
#: dh_installdocs:44
msgid ""
"Note that debian/README.debian is also installed as README.Debian, and "
"debian/TODO will be installed as TODO.Debian in non-native packages."
msgstr ""

#. type: =item
#: dh_installdocs:47
msgid "debian/I<package>.doc-base"
msgstr ""

#. type: textblock
#: dh_installdocs:49
msgid ""
"Installed as doc-base control files. Note that the doc-id will be determined "
"from the \"Document:\" entry in the doc-base control file in question."
msgstr ""

#. type: =item
#: dh_installdocs:53
msgid "debian/I<package>.doc-base.*"
msgstr ""

#. type: textblock
#: dh_installdocs:55
msgid ""
"If your package needs to register more than one document, you need multiple "
"doc-base files, and can name them like this."
msgstr ""

#. type: textblock
#: dh_installdocs:66 dh_installinfo:37 dh_installman:66
msgid ""
"Install all files specified by command line parameters in ALL packages acted "
"on."
msgstr ""

#. type: textblock
#: dh_installdocs:71
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"installed. Note that this includes doc-base files."
msgstr ""

#. type: =item
#: dh_installdocs:74
msgid "B<--link-doc=>I<package>"
msgstr ""

#. type: textblock
#: dh_installdocs:76
msgid ""
"Make the documentation directory of all packages acted on be a symlink to "
"the documentation directory of I<package>. This has no effect when acting on "
"I<package> itself, or if the documentation directory to be created already "
"exists when B<dh_installdocs> is run. To comply with policy, I<package> must "
"be a binary package that comes from the same source package."
msgstr ""

#. type: textblock
#: dh_installdocs:82
msgid ""
"debhelper will try to avoid installing files into linked documentation "
"directories that would cause conflicts with the linked package. The B<-A> "
"option will have no effect on packages with linked documentation "
"directories, and copyright, changelog, README.Debian, and TODO files will "
"not be installed."
msgstr ""

#. type: textblock
#: dh_installdocs:88
msgid ""
"(An older method to accomplish the same thing, which is still supported, is "
"to make the documentation directory of a package be a dangling symlink, "
"before calling dh_installdocs.)"
msgstr ""

#. type: textblock
#: dh_installdocs:94
msgid ""
"Install these files as documentation into the first package acted on. (Or in "
"all packages if B<-A> is specified)."
msgstr ""

#. type: textblock
#: dh_installdocs:101
msgid "This is an example of a debian/package.docs file:"
msgstr ""

#. type: verbatim
#: dh_installdocs:103
#, no-wrap
msgid ""
"  README\n"
"  TODO\n"
"  debian/notes-for-maintainers.txt\n"
"  docs/manual.txt\n"
"  docs/manual.pdf\n"
"  docs/manual-html/\n"
"\n"
msgstr ""

#. type: textblock
#: dh_installdocs:112
msgid ""
"Note that dh_installdocs will happily copy entire directory hierarchies if "
"you ask it to (similar to cp -a). If it is asked to install a directory, it "
"will install the complete contents of the directory."
msgstr ""

#. type: textblock
#: dh_installemacsen:5
msgid "dh_installemacsen - register an emacs add on package"
msgstr ""

#. type: textblock
#: dh_installemacsen:14
msgid ""
"B<dh_installemacsen> [S<I<debhelper options>>] [B<-n>] [B<--priority=>I<n>] "
"[B<--flavor=>I<foo>]"
msgstr ""

#. type: textblock
#: dh_installemacsen:18
msgid ""
"dh_installemacsen is a debhelper program that is responsible for installing "
"files used by the debian emacsen-common package into package build "
"directories."
msgstr ""

#. type: textblock
#: dh_installemacsen:22
msgid ""
"It also automatically generates the postinst and prerm commands needed to "
"register a package as an emacs add on package. The commands are added to the "
"maintainer scripts by dh_installdeb. See L<dh_installdeb(1)> for an "
"explanation of how this works."
msgstr ""

#. type: =item
#: dh_installemacsen:31
msgid "debian/I<package>.emacsen-install"
msgstr ""

#. type: textblock
#: dh_installemacsen:33
msgid ""
"Installed into usr/lib/emacsen-common/packages/install/package in the "
"package build directory."
msgstr ""

#. type: =item
#: dh_installemacsen:36
msgid "debian/I<package>.emacsen-remove"
msgstr ""

#. type: textblock
#: dh_installemacsen:38
msgid ""
"Installed into usr/lib/emacsen-common/packages/remove/package in the package "
"build directory."
msgstr ""

#. type: =item
#: dh_installemacsen:41
msgid "debian/I<package>.emacsen-startup"
msgstr ""

#. type: textblock
#: dh_installemacsen:43
msgid ""
"Installed into etc/emacs/site-start.d/50I<package>.el in the package build "
"directory. Use --priority to use a different priority than 50."
msgstr ""

#. type: textblock
#: dh_installemacsen:54
msgid "Do not modify postinst/prerm scripts."
msgstr ""

#. type: =item
#: dh_installemacsen:56 dh_installwm:38
msgid "B<--priority=>I<n>"
msgstr ""

#. type: textblock
#: dh_installemacsen:58
msgid "Sets the priority number of a site-start.d file. Default is 50."
msgstr ""

#. type: =item
#: dh_installemacsen:60
msgid "B<--flavor=>I<foo>"
msgstr ""

#. type: textblock
#: dh_installemacsen:62
msgid ""
"Sets the flavor a site-start.d file will be installed in. Default is "
"\"emacs\", alternatives include \"xemacs\" and \"emacs20\"."
msgstr ""

#. type: textblock
#: dh_installexamples:5
msgid "dh_installexamples - install example files into package build directories"
msgstr ""

#. type: textblock
#: dh_installexamples:14
msgid ""
"B<dh_installexamples> [S<I<debhelper options>>] [B<-A>] [B<-X>I<item>] "
"[S<I<file ...>>]"
msgstr ""

#. type: textblock
#: dh_installexamples:18
msgid ""
"dh_installexamples is a debhelper program that is responsible for installing "
"examples into usr/share/doc/package/examples in package build directories."
msgstr ""

#. type: =item
#: dh_installexamples:26
msgid "debian/I<package>.examples"
msgstr ""

#. type: textblock
#: dh_installexamples:28
msgid "Lists example files or directories to be installed."
msgstr ""

#. type: textblock
#: dh_installexamples:38
msgid ""
"Install any files specified by command line parameters in ALL packages acted "
"on."
msgstr ""

#. type: textblock
#: dh_installexamples:48
msgid ""
"Install these files (or directories) as examples into the first package "
"acted on. (Or into all packages if -A is specified.)"
msgstr ""

#. type: textblock
#: dh_installexamples:55
msgid ""
"Note that dh_installexamples will happily copy entire directory hierarchies "
"if you ask it to (similar to cp -a). If it is asked to install a directory, "
"it will install the complete contents of the directory."
msgstr ""

#. type: textblock
#: dh_installifupdown:5
msgid "dh_installifupdown - install if-up and if-down hooks"
msgstr ""

#. type: textblock
#: dh_installifupdown:14
msgid "B<dh_installifupdown> [S<I<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

#. type: textblock
#: dh_installifupdown:18
msgid ""
"dh_installifupdown is a debhelper program that is responsible for installing "
"if-up, if-down, if-pre-up, and if-post-down hook scripts into package build "
"directories."
msgstr ""

#. type: =item
#: dh_installifupdown:26
msgid "debian/I<package>.if-up"
msgstr ""

#. type: =item
#: dh_installifupdown:28
msgid "debian/I<package>.if-down"
msgstr ""

#. type: =item
#: dh_installifupdown:30
msgid "debian/I<package>.if-pre-up"
msgstr ""

#. type: =item
#: dh_installifupdown:32
msgid "debian/I<package>.if-post-down"
msgstr ""

#. type: textblock
#: dh_installifupdown:34
msgid ""
"These files are installed into etc/network/if-*.d/I<package> in the package "
"build directory."
msgstr ""

#. type: textblock
#: dh_installifupdown:45
msgid ""
"Look for files named debian/package.name.if-* and install them as "
"etc/network/if-*/name, instead of using the usual files and installing them "
"as the package name."
msgstr ""

#. type: textblock
#: dh_installinfo:5
msgid "dh_installinfo - install info files"
msgstr ""

#. type: textblock
#: dh_installinfo:14
msgid "B<dh_installinfo> [S<I<debhelper options>>] [B<-A>] [S<I<file ...>>]"
msgstr ""

#. type: textblock
#: dh_installinfo:18
msgid ""
"dh_installinfo is a debhelper program that is responsible for installing "
"info files into usr/share/info in the package build directory."
msgstr ""

#. type: =item
#: dh_installinfo:25
msgid "debian/I<package>.info"
msgstr ""

#. type: textblock
#: dh_installinfo:27
msgid "List info files to be installed."
msgstr ""

#. type: textblock
#: dh_installinfo:42
msgid ""
"Install these info files into the first package acted on. (Or in all "
"packages if -A is specified)."
msgstr ""

#. type: textblock
#: dh_installinit:5
msgid ""
"dh_installinit - install upstart jobs or init scripts into package build "
"directories"
msgstr ""

#. type: textblock
#: dh_installinit:14
msgid ""
"B<dh_installinit> [S<I<debhelper options>>] [B<--name=>I<name>] [B<-n>] "
"[B<-R>] [B<-r>] [B<-d>] [B<-O>] [S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_installinit:18
msgid ""
"dh_installinit is a debhelper program that is responsible for installing "
"upstart job files or init scripts with associated defaults files into "
"package build directories, and in the former case providing compatibility "
"handling for non-upstart systems."
msgstr ""

#. type: textblock
#: dh_installinit:23
msgid ""
"It also automatically generates the postinst and postrm and prerm commands "
"needed to set up the symlinks in /etc/rc*.d/ and to start and stop the init "
"scripts."
msgstr ""

#. type: =item
#: dh_installinit:31
msgid "debian/I<package>.upstart"
msgstr ""

#. type: textblock
#: dh_installinit:33
msgid ""
"If this exists, it is installed into etc/init/I<package>.conf in the package "
"build directory."
msgstr ""

#. type: =item
#: dh_installinit:36
msgid "debian/I<package>.init"
msgstr ""

#. type: textblock
#: dh_installinit:38
msgid ""
"Otherwise, if this exists, it is installed into etc/init.d/I<package> in the "
"package build directory."
msgstr ""

#. type: =item
#: dh_installinit:41
msgid "debian/I<package>.default"
msgstr ""

#. type: textblock
#: dh_installinit:43
msgid ""
"If this exists, it is installed into etc/default/I<package> in the package "
"build directory."
msgstr ""

#. type: textblock
#: dh_installinit:54
msgid "Do not modify postinst/postrm/prerm scripts."
msgstr ""

#. type: =item
#: dh_installinit:56
msgid "B<-o>, B<--onlyscripts>"
msgstr ""

#. type: textblock
#: dh_installinit:58
msgid ""
"Only modify postinst/postrm/prerm scripts, do not actually install any init "
"script, default files, or upstart job.  May be useful if the init script or "
"upstart job is shipped and/or installed by upstream in a way that doesn't "
"make it easy to let dh_installinit find it."
msgstr ""

#. type: textblock
#: dh_installinit:63
msgid ""
"If no upstart job file is installed in the target directory when "
"dh_installinit --onlyscripts is called, this program will assume that an "
"init script is being installed and not provide the compatibility symlinks or "
"upstart dependencies."
msgstr ""

#. type: =item
#: dh_installinit:68
msgid "B<-R>, B<--restart-after-upgrade>"
msgstr ""

#. type: textblock
#: dh_installinit:70
msgid ""
"Do not stop the init script until after the package upgrade has been "
"completed. This is different than the default behavior, which stops the "
"script in the prerm, and starts it again in the postinst."
msgstr ""

#. type: textblock
#: dh_installinit:74
msgid ""
"This can be useful for daemons that should not have a possibly long downtime "
"during upgrade. But you should make sure that the daemon will not get "
"confused by the package being upgraded while it's running before using this "
"option."
msgstr ""

#. type: =item
#: dh_installinit:79
msgid "B<-r>, B<--no-restart-on-upgrade>"
msgstr ""

#. type: textblock
#: dh_installinit:81
msgid "Do not stop init script on upgrade."
msgstr ""

#. type: =item
#: dh_installinit:83
msgid "B<--no-start>"
msgstr ""

#. type: textblock
#: dh_installinit:85
msgid ""
"Do not start the init script on install or upgrade, or stop it on removal.  "
"Only call update-rc.d. Useful for rcS scripts."
msgstr ""

#. type: =item
#: dh_installinit:88
msgid "B<-d>, B<--remove-d>"
msgstr ""

#. type: textblock
#: dh_installinit:90
msgid ""
"Remove trailing \"d\" from the name of the package, and use the result for "
"the filename the upstart job file is installed as in etc/init/ , or for the "
"filename the init script is installed as in etc/init.d and the default file "
"is installed as in etc/default/ . This may be useful for daemons with names "
"ending in \"d\". (Note: this takes precedence over the --init-script "
"parameter described below.)"
msgstr ""

#. type: =item
#: dh_installinit:97
msgid "B<-u>I<params> B<--update-rcd-params=>I<params>"
msgstr ""

#. type: textblock
#: dh_installinit:101
msgid ""
"Pass \"params\" to L<update-rc.d(8)>. If not specified, \"defaults\" will be "
"passed to L<update-rc.d(8)>."
msgstr ""

#. type: textblock
#: dh_installinit:106
msgid ""
"Install the upstart job file or the init script (and default file) using the "
"filename I<name> instead of the default filename, which is the package "
"name.  When this parameter is used, dh_installinit looks for and installs "
"files named debian/package.name.upstart, debian/package.name.init and "
"debian/package.name.default, instead of the usual debian/package.upstart, "
"debian/package.init and debian/package.default."
msgstr ""

#. type: =item
#: dh_installinit:113
msgid "B<--init-script=>I<scriptname>"
msgstr ""

#. type: textblock
#: dh_installinit:115
msgid ""
"Use \"scriptname\" as the filename the init script is installed as in "
"etc/init.d/ (and also use it as the filename for the defaults file, if it is "
"installed). If you use this parameter, dh_installinit will look to see if a "
"file in the debian/ directory exists that looks like \"package.scriptname\" "
"and if so will install it as the init script in preference to the files it "
"normally installs."
msgstr ""

#. type: textblock
#: dh_installinit:122
msgid ""
"This parameter is deprecated, use the --name parameter instead.  This "
"parameter will be ignored completely for upstart jobs."
msgstr ""

#. type: =item
#: dh_installinit:125
msgid "B<--upstart-only>"
msgstr ""

#. type: textblock
#: dh_installinit:127
msgid ""
"Only install an upstart job file, and do not include maintainer script code "
"to replace an init script with that upstart job."
msgstr ""

#. type: textblock
#: dh_installinit:130
msgid ""
"This parameter is intended for use when the \"package.upstart\" file is new "
"and only to be used on Upstart-based systems."
msgstr ""

#. type: =item
#: dh_installinit:133
msgid "B<--error-handler=>I<function>"
msgstr ""

#. type: textblock
#: dh_installinit:135
msgid ""
"Call the named shell function if running the init script fails. The function "
"should be provided in the prerm and postinst scripts, before the #DEBHELPER# "
"token."
msgstr ""

#. type: =head1
#: dh_installinit:326
msgid "AUTHORS"
msgstr ""

#. type: textblock
#: dh_installinit:330
msgid "Steve Langasek <steve.langasek@canonical.com>"
msgstr ""

#. type: textblock
#: dh_installinit:332
msgid "Scott James Remnant <scott@canonical.com>"
msgstr ""

#. type: textblock
#: dh_installlogcheck:5
msgid "dh_installlogcheck - install logcheck rulefiles into etc/logcheck/"
msgstr ""

#. type: textblock
#: dh_installlogcheck:14
msgid "B<dh_installlogcheck> [S<B<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_installlogcheck:18
msgid ""
"dh_installlogcheck is a debhelper program that is responsible for installing "
"logcheck rule files."
msgstr ""

#. type: =item
#: dh_installlogcheck:25
msgid "debian/I<package>.logcheck.cracking"
msgstr ""

#. type: =item
#: dh_installlogcheck:27
msgid "debian/I<package>.logcheck.violations"
msgstr ""

#. type: =item
#: dh_installlogcheck:29
msgid "debian/I<package>.logcheck.violations.ignore"
msgstr ""

#. type: =item
#: dh_installlogcheck:31
msgid "debian/I<package>.logcheck.ignore.workstation"
msgstr ""

#. type: =item
#: dh_installlogcheck:33
msgid "debian/I<package>.logcheck.ignore.server"
msgstr ""

#. type: =item
#: dh_installlogcheck:35
msgid "debian/I<package>.logcheck.ignore.paranoid"
msgstr ""

#. type: textblock
#: dh_installlogcheck:37
msgid ""
"Each of these files, if present, are installed into corresponding "
"subdirectories of etc/logcheck/ in package build directories."
msgstr ""

#. type: verbatim
#: dh_installlogcheck:70
#, no-wrap
msgid ""
"This program is a part of debhelper.\n"
"    \n"
msgstr ""

#. type: textblock
#: dh_installlogcheck:74
msgid "Jon Middleton <jjm@debian.org>"
msgstr ""

#. type: textblock
#: dh_installlogrotate:5
msgid "dh_installlogrotate - install logrotate config files"
msgstr ""

#. type: textblock
#: dh_installlogrotate:14
msgid "B<dh_installlogrotate> [S<I<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

#. type: textblock
#: dh_installlogrotate:18
msgid ""
"dh_installlogrotate is a debhelper program that is responsible for "
"installing logrotate config files into etc/logrotate.d in package build "
"directories.  Files named debian/package.logrotate are installed."
msgstr ""

#. type: textblock
#: dh_installlogrotate:28
msgid ""
"Look for files named debian/package.name.logrotate and install them as "
"etc/logrotate.d/name, instead of using the usual files and installing them "
"as the package name."
msgstr ""

#. type: textblock
#: dh_installman:5
msgid "dh_installman - install man pages into package build directories"
msgstr ""

#. type: textblock
#: dh_installman:15
msgid "B<dh_installman> [S<I<debhelper options>>] [S<I<manpage ...>>]"
msgstr ""

#. type: textblock
#: dh_installman:19
msgid ""
"dh_installman is a debhelper program that handles installing man pages into "
"the correct locations in package build directories. You tell it what man "
"pages go in your packages, and it figures out where to install them based on "
"the section field in their .TH line. If you have a properly formatted .TH "
"line, your man page will be installed into the right directory, with the "
"right name (this includes proper handling of pages with a subsection, like "
"\"3perl\", which are placed in man3, and given an extension of "
"\".3perl\"). If your .TH line is incorrect or missing, the program may guess "
"wrong based on the file extension."
msgstr ""

#. type: textblock
#: dh_installman:29
msgid ""
"It also supports translated man pages, by looking for extensions like .ll.8 "
"and .ll_LL.8, or by use of the --language switch."
msgstr ""

#. type: textblock
#: dh_installman:32
msgid ""
"If dh_installman seems to install a man page into the wrong section or with "
"the wrong extension, this is because the man page has the wrong section "
"listed in its .TH line. Edit the man page and correct the section, and "
"dh_installman will follow suit.  See L<man(7)> for details about the .TH "
"section. If dh_installman seems to install a man page into a directory like "
"/usr/share/man/pl/man1/, that is because your program has a name like "
"\"foo.pl\", and dh_installman assumes that means it is translated into "
"Polish. Use --language=C to avoid this."
msgstr ""

#. type: textblock
#: dh_installman:41
msgid ""
"After the man page installation step, dh_installman will check to see if any "
"of the man pages in the temporary directories of any of the packages it is "
"acting on contain \".so\" links. If so, it changes them to symlinks."
msgstr ""

#. type: textblock
#: dh_installman:45
msgid ""
"Also, dh_installman will use man to guess the character encoding of each "
"manual page and convert it to UTF-8. If the guesswork fails for some reason, "
"you can override it using an encoding declaration. See L<manconv(1)> for "
"details."
msgstr ""

#. type: =item
#: dh_installman:54
msgid "debian/I<package>.manpages"
msgstr ""

#. type: textblock
#: dh_installman:56
msgid "Lists man pages to be installed."
msgstr ""

#. type: =item
#: dh_installman:69
msgid "B<--language>=ll"
msgstr ""

#. type: textblock
#: dh_installman:71
msgid ""
"Use this to specify that the man pages being acted on are written in the "
"specified language."
msgstr ""

#. type: =item
#: dh_installman:74
msgid "I<manpage ...>"
msgstr ""

#. type: textblock
#: dh_installman:76
msgid ""
"Install these man pages into the first package acted on. (Or in all packages "
"if -A is specified)."
msgstr ""

#. type: textblock
#: dh_installman:83
msgid ""
"An older version of this program, L<dh_installmanpages(1)>, is still used by "
"some packages, and so is still included in debhelper.  It is, however, "
"deprecated, due to its counterintuitive and inconsistent interface. Use this "
"program instead."
msgstr ""

#. type: textblock
#: dh_installmanpages:5
msgid "dh_installmanpages - old-style man page installer (deprecated)"
msgstr ""

#. type: textblock
#: dh_installmanpages:15
msgid "B<dh_installmanpages> [S<I<debhelper options>>] [S<I<file ...>>]"
msgstr ""

#. type: textblock
#: dh_installmanpages:19
msgid ""
"dh_installmanpages is a debhelper program that is responsible for "
"automatically installing man pages into usr/share/man/ in package build "
"directories."
msgstr ""

#. type: textblock
#: dh_installmanpages:23
msgid ""
"This is a DWIM-style program, with an interface unlike the rest of "
"debhelper. It is deprecated, and you are encouraged to use "
"L<dh_installman(1)> instead."
msgstr ""

#. type: textblock
#: dh_installmanpages:27
msgid ""
"dh_installmanpages scans the current directory and all subdirectories for "
"filenames that look like man pages. (Note that only real files are looked "
"at; symlinks are ignored.) It uses L<file(1)> to verify that the files are "
"in the correct format. Then, based on the files' extensions, it installs "
"them into the correct man directory."
msgstr ""

#. type: textblock
#: dh_installmanpages:33
msgid ""
"All filenames specified as parameters will be skipped by "
"dh_installmanpages.  This is useful if by default it installs some man pages "
"that you do not want to be installed."
msgstr ""

#. type: textblock
#: dh_installmanpages:37
msgid ""
"After the man page installation step, dh_installmanpages will check to see "
"if any of the man pages are \".so\" links. If so, it changes them to "
"symlinks."
msgstr ""

#. type: textblock
#: dh_installmanpages:46
msgid ""
"Do not install these files as man pages, even if they look like valid man "
"pages."
msgstr ""

#. type: =head1
#: dh_installmanpages:51
msgid "BUGS"
msgstr ""

#. type: textblock
#: dh_installmanpages:53
msgid ""
"dh_installmanpages will install the man pages it finds into B<all> packages "
"you tell it to act on, since it can't tell what package the man pages belong "
"in. This is almost never what you really want (use -p to work around this, "
"or use the much better L<dh_installman(1)> program instead)."
msgstr ""

#. type: textblock
#: dh_installmanpages:58
msgid "Files ending in I<.man> will be ignored."
msgstr ""

#. type: textblock
#: dh_installmanpages:60
msgid ""
"Files specified as parameters that contain spaces in their filenames will "
"not be processed properly."
msgstr ""

#. type: textblock
#: dh_installmenu:5
msgid "dh_installmenu - install debian menu files into package build directories"
msgstr ""

#. type: textblock
#: dh_installmenu:14
msgid "B<dh_installmenu> [S<B<debhelper options>>] [B<-n>]"
msgstr ""

#. type: textblock
#: dh_installmenu:18
msgid ""
"dh_installmenu is a debhelper program that is responsible for installing "
"files used by the debian menu package into package build directories."
msgstr ""

#. type: textblock
#: dh_installmenu:21
msgid ""
"It also automatically generates the postinst and postrm commands needed to "
"interface with the debian menu package. These commands are inserted into the "
"maintainer scripts by L<dh_installdeb(1)>."
msgstr ""

#. type: =item
#: dh_installmenu:29
msgid "debian/I<package>.menu"
msgstr ""

#. type: textblock
#: dh_installmenu:31
msgid ""
"Debian menu files, installed into usr/share/menu/I<package> in the package "
"build directory. See L<menufile(5)> for its format."
msgstr ""

#. type: =item
#: dh_installmenu:34
msgid "debian/I<package>.menu-method"
msgstr ""

#. type: textblock
#: dh_installmenu:36
msgid ""
"Debian menu method files, installed into etc/menu-methods/I<package> in the "
"package build directory."
msgstr ""

#. type: textblock
#: dh_installmenu:47 dh_installmime:47 dh_installmodules:50 dh_installudev:51 dh_makeshlibs:74 dh_python:62
msgid "Do not modify postinst/postrm scripts."
msgstr ""

#. type: textblock
#: dh_installmenu:89
msgid "L<debhelper(7)> L<update-menus(1)> L<menufile(5)>"
msgstr ""

#. type: textblock
#: dh_installmime:5
msgid "dh_installmime - install mime files into package build directories"
msgstr ""

#. type: textblock
#: dh_installmime:14
msgid "B<dh_installmime> [S<I<debhelper options>>] [B<-n>]"
msgstr ""

#. type: textblock
#: dh_installmime:18
msgid ""
"dh_installmime is a debhelper program that is responsible for installing "
"mime files into package build directories."
msgstr ""

#. type: textblock
#: dh_installmime:21
msgid ""
"It also automatically generates the postinst and postrm commands needed to "
"interface with the debian mime-support and shared-mime-info packages. These "
"commands are inserted into the maintainer scripts by L<dh_installdeb(1)>."
msgstr ""

#. type: =item
#: dh_installmime:29
msgid "debian/I<package>.mime"
msgstr ""

#. type: textblock
#: dh_installmime:31
msgid ""
"Installed into usr/lib/mime/packages/I<package> in the package build "
"directory."
msgstr ""

#. type: =item
#: dh_installmime:34
msgid "debian/I<package>.sharedmimeinfo"
msgstr ""

#. type: textblock
#: dh_installmime:36
msgid ""
"Installed into /usr/share/mime/packages/I<package>.xml in the package build "
"directory."
msgstr ""

#. type: textblock
#: dh_installmodules:5
msgid "dh_installmodules - register modules with modutils"
msgstr ""

#. type: textblock
#: dh_installmodules:16
msgid "B<dh_installmodules> [S<I<debhelper options>>] [B<-n>] [B<--name=>I<name>]"
msgstr ""

#. type: textblock
#: dh_installmodules:20
msgid ""
"dh_installmodules is a debhelper program that is responsible for registering "
"kernel modules."
msgstr ""

#. type: textblock
#: dh_installmodules:23
msgid ""
"Kernel modules are searched for in the package build directory and if found, "
"postinst and postrm commands are automatically generated to run depmod and "
"register the modules when the package is installed.  These commands are "
"inserted into the maintainer scripts by L<dh_installdeb(1)>."
msgstr ""

#. type: =item
#: dh_installmodules:33
msgid "debian/I<package>.modprobe"
msgstr ""

#. type: textblock
#: dh_installmodules:35
msgid "Installed to etc/modprobe.d/I<package>.conf in the package build directory."
msgstr ""

#. type: =item
#: dh_installmodules:37
msgid "debian/I<package>.modules"
msgstr ""

#. type: textblock
#: dh_installmodules:39
msgid ""
"These files were installed for use by modutils, but are now not used and "
"dh_installmodules will warn if these files are present."
msgstr ""

#. type: textblock
#: dh_installmodules:54
msgid ""
"When this parameter is used, dh_installmodules looks for and installs files "
"named debian/I<package>.I<name>.modprobe instead of the usual "
"debian/I<package>.modprobe"
msgstr ""

#. type: textblock
#: dh_installpam:5
msgid "dh_installpam - install pam support files"
msgstr ""

#. type: textblock
#: dh_installpam:14
msgid "B<dh_installpam> [S<I<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

#. type: textblock
#: dh_installpam:18
msgid ""
"dh_installpam is a debhelper program that is responsible for installing "
"files used by PAM into package build directories."
msgstr ""

#. type: =item
#: dh_installpam:25
msgid "debian/I<package>.pam"
msgstr ""

#. type: textblock
#: dh_installpam:27
msgid "Installed into etc/pam.d/I<package> in the package build directory."
msgstr ""

#. type: textblock
#: dh_installpam:37
msgid ""
"Look for files named debian/I<package>.I<name>.pam and install them as "
"etc/pam.d/I<name>, instead of using the usual files and installing them "
"using the package name."
msgstr ""

#. type: textblock
#: dh_installppp:5
msgid "dh_installppp - install ppp ip-up and ip-down files"
msgstr ""

#. type: textblock
#: dh_installppp:14
msgid "B<dh_installppp> [S<I<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

#. type: textblock
#: dh_installppp:18
msgid ""
"dh_installppp is a debhelper program that is responsible for installing ppp "
"ip-up and ip-down scripts into package build directories."
msgstr ""

#. type: =item
#: dh_installppp:25
msgid "debian/I<package>.ppp.ip-up"
msgstr ""

#. type: textblock
#: dh_installppp:27
msgid "Installed into etc/ppp/ip-up.d/I<package> in the package build directory."
msgstr ""

#. type: =item
#: dh_installppp:29
msgid "debian/I<package>.ppp.ip-down"
msgstr ""

#. type: textblock
#: dh_installppp:31
msgid "Installed into etc/ppp/ip-down.d/I<package> in the package build directory."
msgstr ""

#. type: textblock
#: dh_installppp:41
msgid ""
"Look for files named debian/package.name.ppp.ip-* and install them as "
"etc/ppp/ip-*/name, instead of using the usual files and installing them as "
"the package name."
msgstr ""

#. type: textblock
#: dh_installudev:5
msgid "dh_installudev - install udev rules files"
msgstr ""

#. type: textblock
#: dh_installudev:15
msgid ""
"B<dh_installudev> [S<I<debhelper options>>] [B<-n>] [B<--name=>I<name>] "
"[B<--priority=>I<priority>]"
msgstr ""

#. type: textblock
#: dh_installudev:19
msgid ""
"dh_installudev is a debhelper program that is responsible for installing "
"udev rules files."
msgstr ""

#. type: textblock
#: dh_installudev:22
msgid ""
"Code is added to the preinst and postinst to handle the upgrade from the old "
"udev rules file location."
msgstr ""

#. type: =item
#: dh_installudev:29
msgid "debian/I<package>.udev"
msgstr ""

#. type: textblock
#: dh_installudev:31
msgid "Installed into lib/udev/rules.d/ in the package build directory."
msgstr ""

#. type: textblock
#: dh_installudev:41
msgid ""
"When this parameter is used, dh_installudev looks for and installs files "
"named debian/I<package>.I<name>.udev instead of the usual "
"debian/I<package>.udev."
msgstr ""

#. type: =item
#: dh_installudev:45
msgid "B<--priority=>I<priority>"
msgstr ""

#. type: textblock
#: dh_installudev:47
msgid "Sets the priority string of the rules.d symlink. Default is 40."
msgstr ""

#. type: textblock
#: dh_installwm:5
msgid "dh_installwm - register a window manager"
msgstr ""

#. type: textblock
#: dh_installwm:14
msgid ""
"B<dh_installwm> [S<I<debhelper options>>] [B<-n>] [B<--priority=>I<n>] "
"[S<I<wm ...>>]"
msgstr ""

#. type: textblock
#: dh_installwm:18
msgid ""
"dh_installwm is a debhelper program that is responsible for generating the "
"postinst and postrm commands that register a window manager with "
"L<update-alternatives(8)>. The window manager's man page is also registered "
"as a slave symlink (in v6 mode and up), if it is found in "
"usr/share/man/man1/ in the package build directory."
msgstr ""

#. type: =item
#: dh_installwm:28
msgid "debian/I<package>.wm"
msgstr ""

#. type: textblock
#: dh_installwm:30
msgid "List window manager programs to register."
msgstr ""

#. type: textblock
#: dh_installwm:40
msgid ""
"Set the priority of the window manager. Default is 20, which is too low for "
"most window managers; see the Debian Policy document for instructions on "
"calculating the correct value."
msgstr ""

#. type: textblock
#: dh_installwm:46
msgid "Do not modify postinst/postrm scripts. Turns this command into a no-op."
msgstr ""

#. type: =item
#: dh_installwm:48
msgid "I<wm ...>"
msgstr ""

#. type: textblock
#: dh_installwm:50
msgid "Window manager programs to register."
msgstr ""

#. type: textblock
#: dh_installxfonts:5
msgid "dh_installxfonts - register X fonts"
msgstr ""

#. type: textblock
#: dh_installxfonts:14
msgid "B<dh_installxfonts> [S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_installxfonts:18
msgid ""
"dh_installxfonts is a debhelper program that is responsible for registering "
"X fonts, so their corresponding fonts.dir, fonts.alias, and fonts.scale be "
"rebuilt properly at install time."
msgstr ""

#. type: textblock
#: dh_installxfonts:22
msgid ""
"Before calling this program, you should have installed any X fonts provided "
"by your package into the appropriate location in the package build "
"directory, and if you have fonts.alias or fonts.scale files, you should "
"install them into the correct location under etc/X11/fonts in your package "
"build directory."
msgstr ""

#. type: textblock
#: dh_installxfonts:28
msgid ""
"Your package should depend on xfonts-utils so that the update-fonts-* "
"commands are available. (This program adds that dependency to "
"${misc:Depends}.)"
msgstr ""

#. type: textblock
#: dh_installxfonts:32
msgid ""
"This program automatically generates the postinst and postrm commands needed "
"to register X fonts. These commands are inserted into the maintainer scripts "
"by dh_installdeb. See L<dh_installdeb(1)> for an explanation of how this "
"works."
msgstr ""

#. type: textblock
#: dh_installxfonts:39
msgid ""
"See L<update-fonts-alias(8)>, L<update-fonts-scale(8)>, and "
"L<update-fonts-dir(8)> for more information about X font installation."
msgstr ""

#. type: textblock
#: dh_installxfonts:42
msgid ""
"See Debian policy, section 11.8.5. for details about doing fonts the Debian "
"way."
msgstr ""

#. type: textblock
#: dh_link:5
msgid "dh_link - create symlinks in package build directories"
msgstr ""

#. type: textblock
#: dh_link:15
msgid ""
"B<dh_link> [S<I<debhelper options>>] [B<-A>] [B<-X>I<item>] [S<I<source "
"destination ...>>]"
msgstr ""

#. type: textblock
#: dh_link:19
msgid ""
"dh_link is a debhelper program that creates symlinks in package build "
"directories."
msgstr ""

#. type: textblock
#: dh_link:22
msgid ""
"dh_link accepts a list of pairs of source and destination files. The source "
"files are the already existing files that will be symlinked from. The "
"destination files are the symlinks that will be created. There B<must> be an "
"equal number of source and destination files specified."
msgstr ""

#. type: textblock
#: dh_link:27
msgid ""
"Be sure you B<do> specify the full filename to both the source and "
"destination files (unlike you would do if you were using something like "
"L<ln(1)>)."
msgstr ""

#. type: textblock
#: dh_link:31
msgid ""
"dh_link will generate symlinks that comply with debian policy - absolute "
"when policy says they should be absolute, and relative links with as short a "
"path as possible. It will also create any subdirectories it needs to to put "
"the symlinks in."
msgstr ""

#. type: textblock
#: dh_link:36
msgid ""
"dh_link also scans the package build tree for existing symlinks which do not "
"conform to debian policy, and corrects them (v4 or later)."
msgstr ""

#. type: =item
#: dh_link:43
msgid "debian/I<package>.links"
msgstr ""

#. type: textblock
#: dh_link:45
msgid ""
"Lists pairs of source and destination files to be symlinked. Each pair "
"should be put on its own line, with the source and destination separated by "
"whitespace."
msgstr ""

#. type: textblock
#: dh_link:57
msgid ""
"Create any links specified by command line parameters in ALL packages acted "
"on, not just the first."
msgstr ""

#. type: textblock
#: dh_link:62
msgid ""
"Do not correct symlinks that contain \"item\" anywhere in their filename "
"from being corrected to comply with debian policy."
msgstr ""

#. type: =item
#: dh_link:65
msgid "I<source destination ...>"
msgstr ""

#. type: textblock
#: dh_link:67
msgid ""
"Create a file named \"destination\" as a link to a file named \"source\". Do "
"this in the package build directory of the first package acted on.  (Or in "
"all packages if -A is specified.)"
msgstr ""

#. type: verbatim
#: dh_link:75
#, no-wrap
msgid ""
" dh_link usr/share/man/man1/foo.1 usr/share/man/man1/bar.1\n"
"\n"
msgstr ""

#. type: textblock
#: dh_link:77
msgid "Make bar.1 be a symlink to foo.1"
msgstr ""

#. type: verbatim
#: dh_link:79
#, no-wrap
msgid ""
" dh_link var/lib/foo usr/lib/foo \\\n"
"   usr/share/man/man1/foo.1 usr/share/man/man1/bar.1\n"
"\n"
msgstr ""

#. type: textblock
#: dh_link:82
msgid ""
"Make /usr/lib/foo/ be a link to /var/lib/foo/, and bar.1 be a symlink to the "
"foo.1"
msgstr ""

#. type: textblock
#: dh_lintian:5
msgid "dh_lintian - install lintian override files into package build directories"
msgstr ""

#. type: textblock
#: dh_lintian:14
msgid "B<dh_lintian> [S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_lintian:18
msgid ""
"dh_lintian is a debhelper program that is responsible for installing "
"override files used by lintian into package build directories."
msgstr ""

#. type: =item
#: dh_lintian:25
msgid "debian/I<package>.lintian-overrides"
msgstr ""

#. type: textblock
#: dh_lintian:27
msgid ""
"Installed into usr/share/lintian/overrides/I<package> in the package build "
"directory. This file is used to suppress erroneous lintian diagnostics."
msgstr ""

#. type: =item
#: dh_lintian:31
msgid "debian/source.lintian-overrides"
msgstr ""

#. type: textblock
#: dh_lintian:33
msgid ""
"These files are not installed, but will be scanned by lintian to provide "
"overrides for the source package."
msgstr ""

#. type: textblock
#: dh_lintian:63
msgid "L<lintian(1)>"
msgstr ""

#. type: textblock
#: dh_lintian:67
msgid "Steve Robbins <smr@debian.org>"
msgstr ""

#. type: textblock
#: dh_listpackages:5
msgid "dh_listpackages - list binary packages debhelper will act on"
msgstr ""

#. type: textblock
#: dh_listpackages:14
msgid "B<dh_listpackages> [S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_listpackages:18
msgid ""
"dh_listpackages is a debhelper program that outputs a list of all binary "
"packages debhelper commands will act on. If you pass it some options, it "
"will change the list to match the packages other debhelper commands would "
"act on if passed the same options."
msgstr ""

#. type: textblock
#: dh_makeshlibs:5
msgid "dh_makeshlibs - automatically create shlibs file and call dpkg-gensymbols"
msgstr ""

#. type: textblock
#: dh_makeshlibs:14
msgid ""
"B<dh_makeshlibs> [S<I<debhelper options>>] [B<-m>I<major>] "
"[B<-V>I<[dependencies]>] [B<-n>] [B<-X>I<item>] [S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_makeshlibs:18
msgid ""
"dh_makeshlibs is a debhelper program that automatically scans for shared "
"libraries, and generates a shlibs file for the libraries it finds."
msgstr ""

#. type: textblock
#: dh_makeshlibs:21
msgid ""
"It also adds a call to ldconfig in the postinst and postrm scripts (in V3 "
"mode and above only) to any packages in which it finds shared libraries."
msgstr ""

#. type: =item
#: dh_makeshlibs:28
msgid "debian/I<package>.symbols"
msgstr ""

#. type: =item
#: dh_makeshlibs:30
msgid "debian/I<package>.symbols.I<arch>"
msgstr ""

#. type: textblock
#: dh_makeshlibs:32
msgid ""
"These symbols files, if present, are passed to L<dpkg-gensymbols(1)> to be "
"processed and installed. Use the I<arch> specific names if you need to "
"provide different symbols files for different architectures."
msgstr ""

#. type: =item
#: dh_makeshlibs:42
msgid "B<-m>I<major>, B<--major=>I<major>"
msgstr ""

#. type: textblock
#: dh_makeshlibs:44
msgid ""
"Instead of trying to guess the major number of the library with objdump, use "
"the major number specified after the -m parameter. This is much less useful "
"than it used to be, back in the bad old days when this program looked at "
"library filenames rather than using objdump."
msgstr ""

#. type: =item
#: dh_makeshlibs:49
msgid "B<-V>, B<-V>I<dependencies>"
msgstr ""

#. type: =item
#: dh_makeshlibs:51
msgid "B<--version-info>, B<--version-info=>I<dependencies>"
msgstr ""

#. type: textblock
#: dh_makeshlibs:53
msgid ""
"By default, the shlibs file generated by this program does not make packages "
"depend on any particular version of the package containing the shared "
"library. It may be necessary for you to add some version dependancy "
"information to the shlibs file. If -V is specified with no dependency "
"information, the current upstream version of the package is plugged into a "
"dependency that looks like \"packagename (>= packageversion)\". Note that in "
"debhelper compatibility levels before v4, the debian part of the package "
"version number is also included. If -V is specified with parameters, the "
"parameters can be used to specify the exact dependency information needed "
"(be sure to include the package name)."
msgstr ""

#. type: textblock
#: dh_makeshlibs:64
msgid ""
"Beware of using -V without any parameters; this is a conservative setting "
"that always ensures that other packages' shared library dependencies are at "
"least as tight as they need to be (unless your library is prone to changing "
"ABI without updating the upstream version number), so that if the maintainer "
"screws up then they won't break. The flip side is that packages might end up "
"with dependencies that are too tight and so find it harder to be upgraded."
msgstr ""

#. type: textblock
#: dh_makeshlibs:78
msgid ""
"Exclude files that contain \"item\" anywhere in their filename or directory "
"from being treated as shared libraries."
msgstr ""

#. type: =item
#: dh_makeshlibs:81
msgid "B<--add-udeb=>I<udeb>"
msgstr ""

#. type: textblock
#: dh_makeshlibs:83
msgid ""
"Create an additional line for udebs in the shlibs file and use \"udeb\" as "
"the package name for udebs to depend on instead of the regular library "
"package."
msgstr ""

#. type: textblock
#: dh_makeshlibs:88
msgid "Pass \"params\" to L<dpkg-gensymbols(1)>."
msgstr ""

#. type: =item
#: dh_makeshlibs:96
msgid "dh_makeshlibs"
msgstr ""

#. type: verbatim
#: dh_makeshlibs:98
#, no-wrap
msgid ""
"Assuming this is a package named libfoobar1, generates a shlibs file that\n"
"looks something like:\n"
" libfoobar 1 libfoobar1\n"
"\n"
msgstr ""

#. type: =item
#: dh_makeshlibs:102
msgid "dh_makeshlibs -V"
msgstr ""

#. type: verbatim
#: dh_makeshlibs:104
#, no-wrap
msgid ""
"Assuming the current version of the package is 1.1-3, generates a shlibs\n"
"file that looks something like:\n"
" libfoobar 1 libfoobar1 (>= 1.1)\n"
"\n"
msgstr ""

#. type: =item
#: dh_makeshlibs:108
msgid "dh_makeshlibs -V 'libfoobar1 (>= 1.0)'"
msgstr ""

#. type: verbatim
#: dh_makeshlibs:110
#, no-wrap
msgid ""
"Generates a shlibs file that looks something like:\n"
"  libfoobar 1 libfoobar1 (>= 1.0)\n"
"\n"
msgstr ""

#. type: textblock
#: dh_md5sums:5
msgid "dh_md5sums - generate DEBIAN/md5sums file"
msgstr ""

#. type: textblock
#: dh_md5sums:15
msgid ""
"B<dh_md5sums> [S<I<debhelper options>>] [B<-x>] [B<-X>I<item>] "
"[B<--include-conffiles>]"
msgstr ""

#. type: textblock
#: dh_md5sums:19
msgid ""
"dh_md5sums is a debhelper program that is responsible for generating a "
"DEBIAN/md5sums file, which lists the md5sums of each file in the package.  "
"These files are used by the debsums package."
msgstr ""

#. type: textblock
#: dh_md5sums:23
msgid ""
"All files in DEBIAN/ are omitted from the md5sums file, as are all conffiles "
"(unless you use the --include-conffiles switch)."
msgstr ""

#. type: textblock
#: dh_md5sums:26
msgid "The md5sums file is installed with proper permissions and ownerships."
msgstr ""

#. type: =item
#: dh_md5sums:32
msgid "B<-x>, B<--include-conffiles>"
msgstr ""

#. type: textblock
#: dh_md5sums:34
msgid ""
"Include conffiles in the md5sums list. Note that this information is "
"redundant since it is included elsewhere in debian packages."
msgstr ""

#. type: textblock
#: dh_md5sums:39
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"listed in the md5sums file."
msgstr ""

#. type: textblock
#: dh_movefiles:5
msgid "dh_movefiles - move files out of debian/tmp into subpackages"
msgstr ""

#. type: textblock
#: dh_movefiles:14
msgid ""
"B<dh_movefiles> [S<I<debhelper options>>] [B<--sourcedir=>I<dir>] "
"[B<-X>I<item>] S<I<file ...>>]"
msgstr ""

#. type: textblock
#: dh_movefiles:18
msgid ""
"dh_movefiles is a debhelper program that is responsible for moving files out "
"of debian/tmp or some other directory and into other package build "
"directories. This may be useful if your package has a Makefile that installs "
"everything into debian/tmp, and you need to break that up into subpackages."
msgstr ""

#. type: textblock
#: dh_movefiles:23
msgid ""
"Note: dh_install is a much better program, and you are recommended to use it "
"instead of dh_movefiles."
msgstr ""

#. type: =item
#: dh_movefiles:30
msgid "debian/I<package>.files"
msgstr ""

#. type: textblock
#: dh_movefiles:32
msgid ""
"Lists the files to be moved into a package, separated by whitespace. The "
"filenames listed should be relative to debian/tmp/. You can also list "
"directory names, and the whole directory will be moved."
msgstr ""

#. type: =item
#: dh_movefiles:42
msgid "B<--sourcedir=>I<dir>"
msgstr ""

#. type: textblock
#: dh_movefiles:44
msgid ""
"Instead of moving files out of debian/tmp (the default), this option makes "
"it move files out of some other directory. Since the entire contents of the "
"sourcedir is moved, specifying something like --sourcedir=/ is very unsafe, "
"so to prevent mistakes, the sourcedir must be a relative filename; it cannot "
"begin with a `/'."
msgstr ""

#. type: textblock
#: dh_movefiles:57
msgid ""
"Lists files to move. The filenames listed should be relative to "
"debian/tmp/. You can also list directory names, and the whole directory will "
"be moved. It is an error to list files here unless you use -p, -i, or -a to "
"tell dh_movefiles which subpackage to put them in."
msgstr ""

#. type: textblock
#: dh_movefiles:66
msgid ""
"Note that files are always moved out of debian/tmp by default (even if you "
"have instructed debhelper to use a compatibility level higher than one, "
"which does not otherwise use debian/tmp for anything at all). The idea "
"behind this is that the package that is being built can be told to install "
"into debian/tmp, and then files can be moved by dh_movefiles from that "
"directory. Any files or directories that remain are ignored, and get deleted "
"by dh_clean later."
msgstr ""

#. type: textblock
#: dh_perl:5
msgid "dh_perl - calculates perl dependencies and cleans up after MakeMaker"
msgstr ""

#. type: textblock
#: dh_perl:16
msgid "B<dh_perl> [S<I<debhelper options>>] [B<-d>] [S<I<library dirs ...>>]"
msgstr ""

#. type: textblock
#: dh_perl:20
msgid ""
"dh_perl is a debhelper program that is responsible for generating the "
"${perl:Depends} substitutions and adding them to substvars files."
msgstr ""

#. type: textblock
#: dh_perl:23
msgid ""
"The program will look at perl scripts and modules in your package, and will "
"use this information to generate a dependency on perl or perlapi. The "
"dependency will be substituted into your package's control file wherever you "
"place the token \"${perl:Depends}\"."
msgstr ""

#. type: textblock
#: dh_perl:28
msgid ""
"dh_perl also cleans up empty directories that MakeMaker can generate when "
"installing perl modules."
msgstr ""

#. type: =item
#: dh_perl:35
msgid "B<-d>"
msgstr ""

#. type: textblock
#: dh_perl:37
msgid ""
"In some specific cases you may want to depend on perl-base rather than the "
"full perl package. If so, you can pass the -d option to make dh_perl "
"generate a dependency on the correct base package. This is only necessary "
"for some packages that are included in the base system."
msgstr ""

#. type: textblock
#: dh_perl:42
msgid ""
"Note that this flag may cause no dependency on perl-base to be generated at "
"all. perl-base is Essential, so its dependency can be left out, unless a "
"versioned dependency is needed."
msgstr ""

#. type: =item
#: dh_perl:46
msgid "B<-V>"
msgstr ""

#. type: textblock
#: dh_perl:48
msgid ""
"By default, scripts and architecture independent modules don't depend on any "
"specific version of perl.  The -V option causes the current version of the "
"perl (or perl-base with -d) package to be specified."
msgstr ""

#. type: =item
#: dh_perl:52
msgid "I<library dirs>"
msgstr ""

#. type: textblock
#: dh_perl:54
msgid ""
"If your package installs perl modules in non-standard directories, you can "
"make dh_perl check those directories by passing their names on the command "
"line. It will only check the vendorlib and vendorarch directories by "
"default."
msgstr ""

#. type: textblock
#: dh_perl:63
msgid "Debian policy, version 3.8.3"
msgstr ""

#. type: textblock
#: dh_perl:65
msgid "Perl policy, version 1.20"
msgstr ""

#. type: textblock
#: dh_perl:153
msgid "Brendan O'Dea <bod@debian.org>"
msgstr ""

#. type: textblock
#: dh_prep:5
msgid "dh_prep - perform cleanups in preparation for building a binary package"
msgstr ""

#. type: textblock
#: dh_prep:14
msgid "B<dh_prep> [S<I<debhelper options>>] [B<-X>I<item>]"
msgstr ""

#. type: textblock
#: dh_prep:18
msgid ""
"dh_prep is a debhelper program that performs some file cleanups in "
"preparation for building a binary package. (This is what dh_clean -k used to "
"do.) It removes the package build directories, debian/tmp, and some temp "
"files that are generated when building a binary package."
msgstr ""

#. type: textblock
#: dh_prep:23
msgid ""
"It is typically run at the top of the binary-arch and binary-indep targets, "
"or at the top of a target such as install that they depend on."
msgstr ""

#. type: textblock
#: dh_python:5
msgid ""
"dh_python - calculates python dependencies and adds postinst and prerm "
"python scripts (deprecated)"
msgstr ""

#. type: textblock
#: dh_python:15
msgid ""
"B<dh_python> [S<I<debhelper options>>] [B<-n>] [B<-V> I<version>] "
"[S<I<module dirs ...>>]"
msgstr ""

#. type: textblock
#: dh_python:19
msgid ""
"Note: This program is deprecated. You should use dh_pysupport or "
"dh_pycentral instead. This program will do nothing if debian/pycompat or a "
"Python-Version control file field exists."
msgstr ""

#. type: textblock
#: dh_python:23
msgid ""
"dh_python is a debhelper program that is responsible for generating the "
"${python:Depends} substitutions and adding them to substvars files. It will "
"also add a postinst and a prerm script if required."
msgstr ""

#. type: textblock
#: dh_python:27
msgid ""
"The program will look at python scripts and modules in your package, and "
"will use this information to generate a dependency on python, with the "
"current major version, or on pythonX.Y if your scripts or modules need a "
"specific python version. The dependency will be substituted into your "
"package's control file wherever you place the token \"${python:Depends}\"."
msgstr ""

#. type: textblock
#: dh_python:33
msgid ""
"If some modules need to be byte-compiled at install time, appropriate "
"postinst and prerm scripts will be generated. If already byte-compiled "
"modules are found, they are removed."
msgstr ""

#. type: textblock
#: dh_python:37
msgid "If you use this program, your package should build-depend on python."
msgstr ""

#. type: =item
#: dh_python:43
msgid "I<module dirs>"
msgstr ""

#. type: textblock
#: dh_python:45
msgid ""
"If your package installs python modules in non-standard directories, you can "
"make dh_python check those directories by passing their names on the command "
"line. By default, it will check /usr/lib/site-python, /usr/lib/$PACKAGE, "
"/usr/share/$PACKAGE, /usr/lib/games/$PACKAGE, /usr/share/games/$PACKAGE and "
"/usr/lib/python?.?/site-packages."
msgstr ""

#. type: textblock
#: dh_python:51
msgid ""
"Note: only /usr/lib/site-python, /usr/lib/python?.?/site-packages and the "
"extra names on the command line are searched for binary (.so) modules."
msgstr ""

#. type: =item
#: dh_python:54
msgid "B<-V> I<version>"
msgstr ""

#. type: textblock
#: dh_python:56
msgid ""
"If the .py files your package ships are meant to be used by a specific "
"pythonX.Y version, you can use this option to specify the desired version, "
"such as 2.3. Do not use if you ship modules in /usr/lib/site-python."
msgstr ""

#. type: textblock
#: dh_python:68
msgid "Debian policy, version 3.5.7"
msgstr ""

#. type: textblock
#: dh_python:70
msgid "Python policy, version 0.3.7"
msgstr ""

#. type: textblock
#: dh_python:288
msgid "Josselin Mouette <joss@debian.org>"
msgstr ""

#. type: textblock
#: dh_python:290
msgid "most ideas stolen from Brendan O'Dea <bod@debian.org>"
msgstr ""

#. type: textblock
#: dh_scrollkeeper:5
msgid "dh_scrollkeeper - deprecated no-op"
msgstr ""

#. type: textblock
#: dh_scrollkeeper:14
msgid "B<dh_scrollkeeper> [S<I<debhelper options>>] [B<-n>] [S<I<directory>>]"
msgstr ""

#. type: textblock
#: dh_scrollkeeper:18
msgid ""
"dh_scrollkeeper was a debhelper program that handled registering OMF files "
"for ScrollKeeper. However, it no longer does anything, and is now "
"deprecated."
msgstr ""

#. type: textblock
#: dh_shlibdeps:5
msgid "dh_shlibdeps - calculate shared library dependencies"
msgstr ""

#. type: textblock
#: dh_shlibdeps:15
msgid ""
"B<dh_shlibdeps> [S<I<debhelper options>>] [B<-L>I<package>] "
"[B<-l>I<directory>] [B<-X>I<item>] [S<B<--> I<params>>]"
msgstr ""

#. type: textblock
#: dh_shlibdeps:19
msgid ""
"dh_shlibdeps is a debhelper program that is responsible for calculating "
"shared library dependencies for packages."
msgstr ""

#. type: textblock
#: dh_shlibdeps:22
msgid ""
"This program is merely a wrapper around L<dpkg-shlibdeps(1)> that calls it "
"once for each package listed in the control file, passing it a list of ELF "
"executables and shared libraries it has found."
msgstr ""

#. type: textblock
#: dh_shlibdeps:32
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"passed to dpkg-shlibdeps. This will make their dependencies be ignored.  "
"This may be useful in some situations, but use it with caution. This option "
"may be used more than once to exclude more than one thing."
msgstr ""

#. type: textblock
#: dh_shlibdeps:39
msgid "Pass \"params\" to L<dpkg-shlibdeps(1)>."
msgstr ""

#. type: =item
#: dh_shlibdeps:41
msgid "B<-u>I<params>, B<--dpkg-shlibdeps-params=>I<params>"
msgstr ""

#. type: =item
#: dh_shlibdeps:46
msgid "B<-l>I<directory>[:directory:directory:..]"
msgstr ""

#. type: textblock
#: dh_shlibdeps:48
msgid "With recent versions of dpkg-shlibdeps, this option is generally not needed."
msgstr ""

#. type: textblock
#: dh_shlibdeps:51
msgid ""
"Before dpkg-shlibdeps is run, LD_LIBRARY_PATH will have added to it the "
"specified directory (or directories -- separate with colons). With recent "
"versions of dpkg-shlibdeps, this is mostly only useful for packages that "
"build multiple flavors of the same library, or other situations where the "
"library is installed into a directory not on the regular library search "
"path."
msgstr ""

#. type: =item
#: dh_shlibdeps:58
msgid "B<-L>I<package>, B<--libpackage=>I<package>"
msgstr ""

#. type: textblock
#: dh_shlibdeps:60
msgid ""
"With recent versions of dpkg-shlibdeps, this option is generally not needed, "
"unless your package builds multiple flavors of the same library."
msgstr ""

#. type: textblock
#: dh_shlibdeps:63
msgid ""
"It tells dpkg-shlibdeps (via its -S parameter) to look first in the package "
"build directory for the specified package, when searching for libraries, "
"symbol files, and shlibs files."
msgstr ""

#. type: textblock
#: dh_shlibdeps:71
msgid ""
"Suppose that your source package produces libfoo1, libfoo-dev, and "
"libfoo-bin binary packages. libfoo-bin links against libfoo1, and should "
"depend on it. In your rules file, first run dh_makeshlibs, then "
"dh_shlibdeps:"
msgstr ""

#. type: verbatim
#: dh_shlibdeps:75
#, no-wrap
msgid ""
"\tdh_makeshlibs\n"
"\tdh_shlibdeps\n"
"\n"
msgstr ""

#. type: textblock
#: dh_shlibdeps:78
msgid ""
"This will have the effect of generating automatically a shlibs file for "
"libfoo1, and using that file and the libfoo1 library in the "
"debian/libfoo1/usr/lib directory to calculate shared library dependency "
"information."
msgstr ""

#. type: textblock
#: dh_shlibdeps:83
msgid ""
"If a libbar1 package is also produced, that is an alternate build of libfoo, "
"and is installed into /usr/lib/bar/, you can make libfoo-bin depend on "
"libbar1 as follows:"
msgstr ""

#. type: verbatim
#: dh_shlibdeps:87
#, no-wrap
msgid ""
"\tdh_shlibdeps -Llibbar1 -l/usr/lib/bar\n"
"\t\n"
msgstr ""

#. type: textblock
#: dh_shlibdeps:173
msgid "L<debhelper(7)>, L<dpkg-shlibdeps(1)>"
msgstr ""

#. type: textblock
#: dh_strip:5
msgid "dh_strip - strip executables, shared libraries, and some static libraries"
msgstr ""

#. type: textblock
#: dh_strip:15
msgid ""
"B<dh_strip> [S<I<debhelper options>>] [B<-X>I<item>] [--dbg-package=package] "
"[--keep-debug]"
msgstr ""

#. type: textblock
#: dh_strip:19
msgid ""
"dh_strip is a debhelper program that is responsible for stripping "
"executables, shared libraries, and static libraries that are not used for "
"debugging."
msgstr ""

#. type: textblock
#: dh_strip:23
msgid ""
"This program examines your package build directories and works out what to "
"strip on its own. It uses L<file(1)> and file permissions and filenames to "
"figure out what files are shared libraries (*.so), executable binaries, and "
"static (lib*.a) and debugging libraries (lib*_g.a, debug/*.so), and strips "
"each as much as is possible. (Which is not at all for debugging libraries.) "
"In general it seems to make very good guesses, and will do the right thing "
"in almost all cases."
msgstr ""

#. type: textblock
#: dh_strip:31
msgid ""
"Since it is very hard to automatically guess if a file is a module, and hard "
"to determine how to strip a module, dh_strip does not currently deal with "
"stripping binary modules such as .o files."
msgstr ""

#. type: textblock
#: dh_strip:41
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"stripped. You may use this option multiple times to build up a list of "
"things to exclude."
msgstr ""

#. type: =item
#: dh_strip:45
msgid "B<--dbg-package=>I<package>"
msgstr ""

#. type: textblock
#: dh_strip:47
msgid ""
"Causes dh_strip to save debug symbols stripped from the packages it acts on "
"as independent files in the package build directory of the specified "
"debugging package."
msgstr ""

#. type: textblock
#: dh_strip:51
msgid ""
"For example, if your packages are libfoo and foo and you want to include a "
"foo-dbg package with debugging symbols, use dh_strip --dbg-package=foo-dbg."
msgstr ""

#. type: textblock
#: dh_strip:54
msgid ""
"Note that this option behaves significantly different in debhelper "
"compatibility levels 4 and below. Instead of specifying the name of a debug "
"package to put symbols in, it specifies a package (or packages) which should "
"have separated debug symbols, and the separated symbols are placed in "
"packages with \"-dbg\" added to their name."
msgstr ""

#. type: =item
#: dh_strip:60
msgid "B<-k>, B<--keep-debug>"
msgstr ""

#. type: textblock
#: dh_strip:62
msgid ""
"Debug symbols will be retained, but split into an independent file in "
"usr/lib/debug/ in the package build directory. --dbg-package is easier to "
"use than this option, but this option is more flexible."
msgstr ""

#. type: textblock
#: dh_strip:70
msgid ""
"If the DEB_BUILD_OPTIONS environment variable contains \"nostrip\", nothing "
"will be stripped, in accordance with Debian policy (section 10.1 "
"\"Binaries\")."
msgstr ""

#. type: textblock
#: dh_strip:76
msgid "Debian policy, version 3.0.1"
msgstr ""

#. type: textblock
#: dh_suidregister:5
msgid "dh_suidregister - suid registration program (deprecated)"
msgstr ""

#. type: textblock
#: dh_suidregister:9 dh_undocumented:14
msgid "Do not run!"
msgstr ""

#. type: textblock
#: dh_suidregister:13
msgid ""
"This program used to register suid and sgid files with L<suidregister(1)>, "
"but with the introduction of L<dpkg-statoverride(8)>, registration of files "
"in this way is unnecessary, and even harmful, so this program is deprecated "
"and should not be used."
msgstr ""

#. type: =head1
#: dh_suidregister:18
msgid "CONVERTING TO STATOVERRIDE"
msgstr ""

#. type: textblock
#: dh_suidregister:20
msgid ""
"Converting a package that uses this program to use the new statoverride "
"mechanism is easy. Just remove the call to dh_suidregister from "
"debian/rules, and add a versioned conflicts into your control file, as "
"follows:"
msgstr ""

#. type: verbatim
#: dh_suidregister:25
#, no-wrap
msgid ""
"  Conflicts: suidmanager (<< 0.50)\n"
"\n"
msgstr ""

#. type: textblock
#: dh_suidregister:27
msgid ""
"The conflicts is only necessary if your package used to register things with "
"suidmanager; if it did not, you can just remove the call to this program "
"from your rules file."
msgstr ""

#. type: textblock
#: dh_testdir:5
msgid "dh_testdir - test directory before building debian package"
msgstr ""

#. type: textblock
#: dh_testdir:14
msgid "B<dh_testdir> [S<I<debhelper options>>] [S<I<file ...>>]"
msgstr ""

#. type: textblock
#: dh_testdir:18
msgid ""
"dh_testdir tries to make sure that you are in the correct directory when "
"building a debian package. It makes sure that the file debian/control "
"exists, as well as any other files you specify. If not, it exits with an "
"error."
msgstr ""

#. type: textblock
#: dh_testdir:29
msgid "Test for the existence of these files too."
msgstr ""

#. type: textblock
#: dh_testroot:5
msgid "dh_testroot - ensure that a package is built as root"
msgstr ""

#. type: textblock
#: dh_testroot:9
msgid "B<dh_testroot> [S<I<debhelper options>>]"
msgstr ""

#. type: textblock
#: dh_testroot:13
msgid ""
"dh_testroot simply checks to see if you are root. If not, it exits with an "
"error. Debian packages must be built as root, though you can use "
"L<fakeroot(1)>"
msgstr ""

#. type: textblock
#: dh_testversion:5
msgid ""
"dh_testversion - ensure that the correct version of debhelper is installed "
"(deprecated)"
msgstr ""

#. type: textblock
#: dh_testversion:14
msgid "B<dh_testversion> [S<I<debhelper options>>] [I<operator>] [I<version>]"
msgstr ""

#. type: textblock
#: dh_testversion:18
msgid "Note: This program is deprecated. You should use build dependencies instead."
msgstr ""

#. type: textblock
#: dh_testversion:21
msgid ""
"dh_testversion compares the version of debhelper against the version you "
"specify, and if the condition is not met, exits with an error message."
msgstr ""

#. type: textblock
#: dh_testversion:24
msgid ""
"You can use this in your debian/rules files if a new debhelper feature is "
"introduced, and your package requires that feature to build correctly. Use "
"debhelper's changelog to figure out the version you need."
msgstr ""

#. type: textblock
#: dh_testversion:28
msgid ""
"Be sure not to overuse dh_testversion. If debhelper version 9.5 introduces a "
"new dh_autofixbugs command, and your package uses it, then if someone tries "
"to build it with debhelper 1.0, the build will fail anyway when "
"dh_autofixbugs cannot be found, so there is no need for you to use "
"dh_testversion."
msgstr ""

#. type: =item
#: dh_testversion:38
msgid "I<operator>"
msgstr ""

#. type: textblock
#: dh_testversion:40
msgid ""
"Optional comparison operator used in comparing the versions. If not "
"specified, \">=\" is used. For descriptions of the comparison operators, see "
"dpkg --help."
msgstr ""

#. type: =item
#: dh_testversion:44
msgid "I<version>"
msgstr ""

#. type: textblock
#: dh_testversion:46
msgid ""
"Version number to compare against the current version of debhelper. If not "
"specified, dh_testversion does nothing."
msgstr ""

#. type: textblock
#: dh_undocumented:5
msgid "dh_undocumented - undocumented.7 symlink program (deprecated no-op)"
msgstr ""

#. type: textblock
#: dh_undocumented:18
msgid ""
"This program used to make symlinks to the undocumented.7 man page for man "
"pages not present in a package. Debian policy now frowns on use of the "
"undocumented.7 man page, and so this program does nothing, and should not be "
"used."
msgstr ""

#. type: textblock
#: dh_usrlocal:5
msgid "dh_usrlocal - migrate usr/local directories to maintainer scripts"
msgstr ""

#. type: textblock
#: dh_usrlocal:17
msgid "B<dh_usrlocal> [S<I<debhelper options>>] [B<-n>]"
msgstr ""

#. type: textblock
#: dh_usrlocal:21
msgid ""
"dh_usrlocal is a debhelper program that can be used for building packages "
"that will provide a subdirectory in /usr/local when installed."
msgstr ""

#. type: textblock
#: dh_usrlocal:24
msgid ""
"It finds subdirectories of usr/local in the package build directory, and "
"removes them, replacing them with maintainer script snippets (unless B<-n> "
"is used) to create the directories at install time, and remove them when the "
"package is removed, in a manner compliant with Debian policy. These snippets "
"are inserted into the maintainer scripts by dh_installdeb. See "
"L<dh_installdeb(1)> for an explanation of Debhelper maintainer script "
"snippets."
msgstr ""

#. type: textblock
#: dh_usrlocal:32
msgid ""
"If the directories found in the build tree have unusual owners, groups, or "
"permissions, then those values will be preserved in the directories made by "
"the postinst script. However, as a special exception, if a directory is "
"owned by root.root, it will be treated as if it is owned by root.staff and "
"is mode 2775. This is useful, since that is the group and mode policy "
"recommends for directories in /usr/local."
msgstr ""

#. type: textblock
#: dh_usrlocal:45
msgid "Do not modify F<postinst>/F<prerm> scripts."
msgstr ""

#. type: textblock
#: dh_usrlocal:57
msgid "Debian policy, version 2.2"
msgstr ""

#. type: textblock
#: dh_usrlocal:122
msgid "Andrew Stribblehill <ads@debian.org>"
msgstr ""
